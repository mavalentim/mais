{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mecanismo de busca e reposit\u00f3rio de bases de dados brasileiras e internacionais. Base dos Dados Mais Uma simples consulta de SQL \u00e9 o suficiente para cruzamento de bases que voc\u00ea desejar. Sem precisar procurar, baixar, tratar, comprar um servidor e subir clusters. Nosso reposit\u00f3rio traz acesso, rapidez, escala, facilidade, economia, curadoria, e transpar\u00eancia ao cen\u00e1rio de dados no Brasil. Clique para acessar o projeto no BigQuery Por que o BigQuery? Acesso : \u00c9 poss\u00edvel deixar os dados p\u00fablicos, i.e., qualquer pessoa com uma conta no Google Cloud pode fazer uma query na base, quando quiser. Rapidez : Mesmo queries muito longas demoram apenas minutos para serem processadas. Escala : O BigQuery escala magicamente para hexabytes se necess\u00e1rio. Facilidade : Voc\u00ea pode cruzar tabelas tratadas e atualizadas num s\u00f3 lugar. Economia : O custo \u00e9 praticamente zero para usu\u00e1rios - 1 TB gratuito por m\u00eas para usar como quiser . Depois disso, s\u00e3o cobrados somente 5 d\u00f3lares por TB de dados que sua query percorrer. Quick Start Acesse os dados direto pelo BigQuery \ud83d\udd0d Acesse os dados pelo seu computador (CLI/API) \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb Como citar o projeto O projeto est\u00e1 licenciado sob a Licen\u00e7a Hipocr\u00e1tica . Sempre que usar os dados cite a fonte como: Carabetta, J.; Dahis, R.; Israel, F.; Scovino, F. (2020) Base dos Dados Mais: Reposit\u00f3rio de Dados. Github - https://github.com/basedosdados/mais. Idiomas Documenta\u00e7\u00e3o est\u00e1 em portugu\u00eas (quando poss\u00edvel), c\u00f3digo e configura\u00e7\u00f5es est\u00e3o em ingl\u00eas.","title":"Introdu\u00e7\u00e3o"},{"location":"#base-dos-dados-mais","text":"Uma simples consulta de SQL \u00e9 o suficiente para cruzamento de bases que voc\u00ea desejar. Sem precisar procurar, baixar, tratar, comprar um servidor e subir clusters. Nosso reposit\u00f3rio traz acesso, rapidez, escala, facilidade, economia, curadoria, e transpar\u00eancia ao cen\u00e1rio de dados no Brasil. Clique para acessar o projeto no BigQuery","title":"Base dos Dados Mais"},{"location":"#por-que-o-bigquery","text":"Acesso : \u00c9 poss\u00edvel deixar os dados p\u00fablicos, i.e., qualquer pessoa com uma conta no Google Cloud pode fazer uma query na base, quando quiser. Rapidez : Mesmo queries muito longas demoram apenas minutos para serem processadas. Escala : O BigQuery escala magicamente para hexabytes se necess\u00e1rio. Facilidade : Voc\u00ea pode cruzar tabelas tratadas e atualizadas num s\u00f3 lugar. Economia : O custo \u00e9 praticamente zero para usu\u00e1rios - 1 TB gratuito por m\u00eas para usar como quiser . Depois disso, s\u00e3o cobrados somente 5 d\u00f3lares por TB de dados que sua query percorrer.","title":"Por que o BigQuery?"},{"location":"#quick-start","text":"Acesse os dados direto pelo BigQuery \ud83d\udd0d Acesse os dados pelo seu computador (CLI/API) \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb","title":"Quick Start"},{"location":"#como-citar-o-projeto","text":"O projeto est\u00e1 licenciado sob a Licen\u00e7a Hipocr\u00e1tica . Sempre que usar os dados cite a fonte como: Carabetta, J.; Dahis, R.; Israel, F.; Scovino, F. (2020) Base dos Dados Mais: Reposit\u00f3rio de Dados. Github - https://github.com/basedosdados/mais.","title":"Como citar o projeto"},{"location":"#idiomas","text":"Documenta\u00e7\u00e3o est\u00e1 em portugu\u00eas (quando poss\u00edvel), c\u00f3digo e configura\u00e7\u00f5es est\u00e3o em ingl\u00eas.","title":"Idiomas"},{"location":"access_data_bq/","text":"Como usar via BigQuery Ao clicar no bot\u00e3o voc\u00ea ser\u00e1 redirecionado para logar na sua conta ou criar uma antes de acessar o projeto. Clique para acessar o projeto no BigQuery Na sua tela dever\u00e1 aparecer o projeto fixado no menu lateral esquerdo, como na imagem abaixo. Criando uma conta no BigQuery \u00c9 preciso, basicamente, ter uma conta Google para acessar o BigQuery. O site deve solicitar que voc\u00ea crie um projeto qualquer no seu BigQuery antes de acessar os nossos dados - n\u00e3o se preocupe, n\u00e3o \u00e9 pago! O BigQuery inicia automaticamente no modo Sandbox, que permite voc\u00ea utilizar seus recursos sem adicionar um modo de pagamento. Leia mais sobre o Sandbox aqui . Acessando o projeto Dentro do projeto existem dois n\u00edveis de organiza\u00e7\u00e3o, datasets (conjuntos de dados) e tables (tabelas), nos quais: Todas as tables est\u00e3o organizadas em datasets Cada table pertence a um \u00fanico dataset Caso n\u00e3o apare\u00e7am as tabelas nos datasets do projeto na 1\u00aa vez que voc\u00ea acessar, atualize a p\u00e1gina. Explorando os dados Exemplo: Qual a evolu\u00e7\u00e3o do PIB per capita de todos os munic\u00edpios? \ud83d\udcc8 O BigQuery utiliza SQL como linguagem nativa. Leia mais sobre a sintaxe utilizada aqui . Rode a query abaixo no Query Editor/Editor de consultas e obtenha o cruzamento das tabelas de popula\u00e7\u00e3o e PIB do IBGE com o resultado anual desde 1991. SELECT pib . id_municipio , pop . ano , pib . PIB / pop . populacao * 1000 as pib_per_capita FROM ` basedosdados . br_ibge_pib . municipios ` as pib JOIN ` basedosdados . br_ibge_populacao . municipios ` as pop ON pib . id_municipio = pop . id_municipio Dica Clicando no bot\u00e3o \ud83d\udd0d Consultar tabela/Query View , o BigQuery cria automaticamente a estrutura b\u00e1sica da sua query em Query Editor/Editor de consultas - basta voc\u00ea completar com os campos e filtros que achar necess\u00e1rios. Entenda os dados O BigQuery possui j\u00e1 um mecanismo de busca que permite buscar por nomes de datasets (conjuntos), tables (tabelas) ou labels (grupos). Constru\u00edmos regras de nomea\u00e7\u00e3o simples e pr\u00e1ticas para facilitar sua busca - veja mais na se\u00e7\u00e3o de Nomenclatura . Metadados Clicando num dataset ou table voc\u00ea j\u00e1 consegue ver toda a estrutura e descri\u00e7\u00e3o das colunas, e pode acessar tamb\u00e9m os detalhes de tratamento e publica\u00e7\u00e3o, para entender melhor os dados.","title":"BigQuery"},{"location":"access_data_bq/#como-usar-via-bigquery","text":"Ao clicar no bot\u00e3o voc\u00ea ser\u00e1 redirecionado para logar na sua conta ou criar uma antes de acessar o projeto. Clique para acessar o projeto no BigQuery Na sua tela dever\u00e1 aparecer o projeto fixado no menu lateral esquerdo, como na imagem abaixo.","title":"Como usar via BigQuery"},{"location":"access_data_bq/#criando-uma-conta-no-bigquery","text":"\u00c9 preciso, basicamente, ter uma conta Google para acessar o BigQuery. O site deve solicitar que voc\u00ea crie um projeto qualquer no seu BigQuery antes de acessar os nossos dados - n\u00e3o se preocupe, n\u00e3o \u00e9 pago! O BigQuery inicia automaticamente no modo Sandbox, que permite voc\u00ea utilizar seus recursos sem adicionar um modo de pagamento. Leia mais sobre o Sandbox aqui .","title":"Criando uma conta no BigQuery"},{"location":"access_data_bq/#acessando-o-projeto","text":"Dentro do projeto existem dois n\u00edveis de organiza\u00e7\u00e3o, datasets (conjuntos de dados) e tables (tabelas), nos quais: Todas as tables est\u00e3o organizadas em datasets Cada table pertence a um \u00fanico dataset Caso n\u00e3o apare\u00e7am as tabelas nos datasets do projeto na 1\u00aa vez que voc\u00ea acessar, atualize a p\u00e1gina.","title":"Acessando o projeto"},{"location":"access_data_bq/#explorando-os-dados","text":"","title":"Explorando os dados"},{"location":"access_data_bq/#exemplo-qual-a-evolucao-do-pib-per-capita-de-todos-os-municipios","text":"O BigQuery utiliza SQL como linguagem nativa. Leia mais sobre a sintaxe utilizada aqui . Rode a query abaixo no Query Editor/Editor de consultas e obtenha o cruzamento das tabelas de popula\u00e7\u00e3o e PIB do IBGE com o resultado anual desde 1991. SELECT pib . id_municipio , pop . ano , pib . PIB / pop . populacao * 1000 as pib_per_capita FROM ` basedosdados . br_ibge_pib . municipios ` as pib JOIN ` basedosdados . br_ibge_populacao . municipios ` as pop ON pib . id_municipio = pop . id_municipio Dica Clicando no bot\u00e3o \ud83d\udd0d Consultar tabela/Query View , o BigQuery cria automaticamente a estrutura b\u00e1sica da sua query em Query Editor/Editor de consultas - basta voc\u00ea completar com os campos e filtros que achar necess\u00e1rios.","title":"Exemplo: Qual a evolu\u00e7\u00e3o do PIB per capita de todos os munic\u00edpios? \ud83d\udcc8"},{"location":"access_data_bq/#entenda-os-dados","text":"O BigQuery possui j\u00e1 um mecanismo de busca que permite buscar por nomes de datasets (conjuntos), tables (tabelas) ou labels (grupos). Constru\u00edmos regras de nomea\u00e7\u00e3o simples e pr\u00e1ticas para facilitar sua busca - veja mais na se\u00e7\u00e3o de Nomenclatura .","title":"Entenda os dados"},{"location":"access_data_bq/#metadados","text":"Clicando num dataset ou table voc\u00ea j\u00e1 consegue ver toda a estrutura e descri\u00e7\u00e3o das colunas, e pode acessar tamb\u00e9m os detalhes de tratamento e publica\u00e7\u00e3o, para entender melhor os dados.","title":"Metadados"},{"location":"access_data_local/","text":"Como acessar os dados localmente $ pip install basedosdados Em apenas 3 passos voc\u00ea consegue obter dados estruturados para baixar e analisar: Instalar a aplica\u00e7\u00e3o Criar um projeto no Google Cloud Realizar sua query para explorar os dados Instalando a aplica\u00e7\u00e3o CLI pip install basedosdados Python pip install basedosdados R Ainda n\u00e3o temos suporte oficial para R, mas recomendamos o pacote bigrquery . install.packages ( \"bigrquery\" ) Seja a primeira pessoa a contribuir (veja Issue #82 no GitHub)! Stata # Ainda n\u00e3o temos suporte :( # Seja a primeira pessoa a contribuir (veja Issue #83 no GitHub)! Criando um projeto no Google Cloud Caso j\u00e1 tenha um projeto pr\u00f3prio, v\u00e1 direto para a pr\u00f3xima etapa! Para criar um projeto no Google Cloud basta ter um email cadastrado no Google. \u00c9 necess\u00e1rio ter um projeto seu, mesmo que vazio, para voc\u00ea fazer queries em nosso reposit\u00f3rio p\u00fablico. Basta seguir o passo-a-passo: Acesse o link: https://console.cloud.google.com/projectselector2/home/dashboard Aceite o Termo de Servi\u00e7os do Google Cloud Clique em Create Project/Criar Projeto Escolha um nome bacana para o seu projeto :) Clique em Create/Criar Veja que seu projeto tem um Nome e um Project ID - este segundo \u00e9 a informa\u00e7\u00e3o que voc\u00ea ir\u00e1 utilizar em <YOUR_PROJECT_ID> para fazer queries no nosso reposit\u00f3rio p\u00fablico. Fazendo queries Utilize todo o poder do BigQuery onde quiser. Para obter, filtrar ou cruzar bases basta escrever a query e carregar em sua linguagem favorita. Abaixo voc\u00ea pode seguir um exemplo de como cruzar as tabelas de popula\u00e7\u00e3o e PIB do IBGE para obter o PIB per capita de todos os munic\u00edpios brasileiros em todos os anos dispon\u00edveis . CLI basedosdados download \"where/to/save/file\" \\ --billing_project_id <YOUR_PROJECT_ID> \\ --query ' SELECT pib.id_municipio, pop.ano, pib.PIB / pop.populacao * 1000 as pib_per_capita FROM `basedosdados.br_ibge_pib.municipios` as pib INNER JOIN `basedosdados.br_ibge_populacao.municipios` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano LIMIT 100;' Caso esteja rodando a query pela 1\u00aa vez ser\u00e1 feita somente a configura\u00e7\u00e3o do seu ambiente Siga as instru\u00e7\u00f5es que ir\u00e3o aparecer at\u00e9 o final e rode a query novamente para puxar os dados :) Python import basedosdados as bd pib_per_capita = \"\"\"SELECT pib.id_municipio , pop.ano, pib.PIB / pop.populacao * 1000 as pib_per_capita FROM `basedosdados.br_ibge_pib.municipios` as pib INNER JOIN `basedosdados.br_ibge_populacao.municipios` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano \"\"\" # Voc\u00ea pode fazer o download no seu computador bd . download ( query = pib_per_capita , savepath = \"where/to/save/file\" , billing_project_id =< YOUR_PROJECT_ID > ) # Ou carregar o resultado da query no pandas df = bd . read_sql ( pib_per_capita , billing_project_id =< YOUR_PROJECT_ID > ) # Ou carregar uma tabela inteira no pandas -- por padr\u00e3o, `query_project_id` # \u00e9 o basedosdados, voc\u00ea pode usar esse par\u00e2metro para escolher outro projeto df = bd . read_table ( dataset_id = 'br_ibge_populacao' , table_id = 'municipios' , billing_project_id =< YOUR_PROJECT_ID > , limit = 100 ) Caso esteja rodando a query pela 1\u00aa vez ser\u00e1 feita somente a configura\u00e7\u00e3o do seu ambiente Siga as instru\u00e7\u00f5es que ir\u00e3o aparecer at\u00e9 o final e rode a query novamente para puxar os dados :) R if ( ! require ( \"bigrquery\" )) install.packages ( \"bigrquery\" ) library ( \"bigrquery\" ) billing_project_id = \"<YOUR_PROJECT_ID>\" pib_per_capita = \"SELECT pib.id_municipio , pop.ano, pib.PIB / pop.populacao * 1000 as pib_per_capita FROM `basedosdados.br_ibge_pib.municipios` as pib INNER JOIN `basedosdados.br_ibge_populacao.municipios` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano\" d <- bq_table_download ( bq_project_query ( billing_project_id , pib_per_capita ), page_size = 500 , bigint = \"integer64\" ) Stata # Ainda n\u00e3o temos suporte :( # Seja a primeira pessoa a contribuir (veja Issue #83 no GitHub)!","title":"Local"},{"location":"access_data_local/#como-acessar-os-dados-localmente","text":"$ pip install basedosdados Em apenas 3 passos voc\u00ea consegue obter dados estruturados para baixar e analisar: Instalar a aplica\u00e7\u00e3o Criar um projeto no Google Cloud Realizar sua query para explorar os dados","title":"Como acessar os dados localmente"},{"location":"access_data_local/#instalando-a-aplicacao","text":"CLI pip install basedosdados Python pip install basedosdados R Ainda n\u00e3o temos suporte oficial para R, mas recomendamos o pacote bigrquery . install.packages ( \"bigrquery\" ) Seja a primeira pessoa a contribuir (veja Issue #82 no GitHub)! Stata # Ainda n\u00e3o temos suporte :( # Seja a primeira pessoa a contribuir (veja Issue #83 no GitHub)!","title":"Instalando a aplica\u00e7\u00e3o"},{"location":"access_data_local/#criando-um-projeto-no-google-cloud","text":"Caso j\u00e1 tenha um projeto pr\u00f3prio, v\u00e1 direto para a pr\u00f3xima etapa! Para criar um projeto no Google Cloud basta ter um email cadastrado no Google. \u00c9 necess\u00e1rio ter um projeto seu, mesmo que vazio, para voc\u00ea fazer queries em nosso reposit\u00f3rio p\u00fablico. Basta seguir o passo-a-passo: Acesse o link: https://console.cloud.google.com/projectselector2/home/dashboard Aceite o Termo de Servi\u00e7os do Google Cloud Clique em Create Project/Criar Projeto Escolha um nome bacana para o seu projeto :) Clique em Create/Criar Veja que seu projeto tem um Nome e um Project ID - este segundo \u00e9 a informa\u00e7\u00e3o que voc\u00ea ir\u00e1 utilizar em <YOUR_PROJECT_ID> para fazer queries no nosso reposit\u00f3rio p\u00fablico.","title":"Criando um projeto no Google Cloud"},{"location":"access_data_local/#fazendo-queries","text":"Utilize todo o poder do BigQuery onde quiser. Para obter, filtrar ou cruzar bases basta escrever a query e carregar em sua linguagem favorita. Abaixo voc\u00ea pode seguir um exemplo de como cruzar as tabelas de popula\u00e7\u00e3o e PIB do IBGE para obter o PIB per capita de todos os munic\u00edpios brasileiros em todos os anos dispon\u00edveis . CLI basedosdados download \"where/to/save/file\" \\ --billing_project_id <YOUR_PROJECT_ID> \\ --query ' SELECT pib.id_municipio, pop.ano, pib.PIB / pop.populacao * 1000 as pib_per_capita FROM `basedosdados.br_ibge_pib.municipios` as pib INNER JOIN `basedosdados.br_ibge_populacao.municipios` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano LIMIT 100;' Caso esteja rodando a query pela 1\u00aa vez ser\u00e1 feita somente a configura\u00e7\u00e3o do seu ambiente Siga as instru\u00e7\u00f5es que ir\u00e3o aparecer at\u00e9 o final e rode a query novamente para puxar os dados :) Python import basedosdados as bd pib_per_capita = \"\"\"SELECT pib.id_municipio , pop.ano, pib.PIB / pop.populacao * 1000 as pib_per_capita FROM `basedosdados.br_ibge_pib.municipios` as pib INNER JOIN `basedosdados.br_ibge_populacao.municipios` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano \"\"\" # Voc\u00ea pode fazer o download no seu computador bd . download ( query = pib_per_capita , savepath = \"where/to/save/file\" , billing_project_id =< YOUR_PROJECT_ID > ) # Ou carregar o resultado da query no pandas df = bd . read_sql ( pib_per_capita , billing_project_id =< YOUR_PROJECT_ID > ) # Ou carregar uma tabela inteira no pandas -- por padr\u00e3o, `query_project_id` # \u00e9 o basedosdados, voc\u00ea pode usar esse par\u00e2metro para escolher outro projeto df = bd . read_table ( dataset_id = 'br_ibge_populacao' , table_id = 'municipios' , billing_project_id =< YOUR_PROJECT_ID > , limit = 100 ) Caso esteja rodando a query pela 1\u00aa vez ser\u00e1 feita somente a configura\u00e7\u00e3o do seu ambiente Siga as instru\u00e7\u00f5es que ir\u00e3o aparecer at\u00e9 o final e rode a query novamente para puxar os dados :) R if ( ! require ( \"bigrquery\" )) install.packages ( \"bigrquery\" ) library ( \"bigrquery\" ) billing_project_id = \"<YOUR_PROJECT_ID>\" pib_per_capita = \"SELECT pib.id_municipio , pop.ano, pib.PIB / pop.populacao * 1000 as pib_per_capita FROM `basedosdados.br_ibge_pib.municipios` as pib INNER JOIN `basedosdados.br_ibge_populacao.municipios` as pop ON pib.id_municipio = pop.id_municipio AND pib.ano = pop.ano\" d <- bq_table_download ( bq_project_query ( billing_project_id , pib_per_capita ), page_size = 500 , bigint = \"integer64\" ) Stata # Ainda n\u00e3o temos suporte :( # Seja a primeira pessoa a contribuir (veja Issue #83 no GitHub)!","title":"Fazendo queries"},{"location":"add_data/","text":"Adicionando dados Configurando o ambiente Adicionando uma tabela simples via CLI/Python Casos avan\u00e7ados","title":"Adicionando dados"},{"location":"add_data/#adicionando-dados","text":"Configurando o ambiente Adicionando uma tabela simples via CLI/Python Casos avan\u00e7ados","title":"Adicionando dados"},{"location":"api_docs/","text":"Documenta\u00e7\u00e3o da API API / pacotes Python & R (autogerado)","title":"Documenta\u00e7\u00e3o da API"},{"location":"api_docs/#documentacao-da-api","text":"API / pacotes Python & R (autogerado)","title":"Documenta\u00e7\u00e3o da API"},{"location":"cli_reference_api/","text":"CLI API Esta API \u00e9 composta de comandos para gerenciamento e inser\u00e7\u00e3o de dados no Google Cloud. Os comandos dispon\u00edveis dentro de cli atualmente s\u00e3o: config , que \u00e9 utilizado para atualizar seus dados de configura\u00e7\u00e3o e gerenciar templates dataset , que permite gerenciar datasets no BigQuery (criar, modificar, publicar , atualizar e deletar) download , que permite baixar/salvar queries de tabelas do BigQuery na sua m\u00e1quina local storage , que permite gerenciar seu Storage no BigQuery (criar e subir arquivos) table , que permite gerenciar tabelas no BigQuery (criar, modificar, publicar , atualizar e deletar) Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas cli Usage: cli [OPTIONS] COMMAND [ARGS]... Options: --templates TEXT Templates path --bucket_name TEXT Project bucket name --metadata_path TEXT Folder to store metadata config Usage: cli config [OPTIONS] COMMAND [ARGS]... overwrite_cli_config Overwrite current configuration Usage: cli config overwrite_cli_config [OPTIONS] refresh_template Overwrite current templates Usage: cli config refresh_template [OPTIONS] dataset Usage: cli dataset [OPTIONS] COMMAND [ARGS]... create Create dataset on BigQuery Usage: cli dataset create [OPTIONS] DATASET_ID Options: -m, --mode TEXT What datasets to create [all|staging|prod] --if_exists TEXT [raise|update|replace|pass] if dataset alread exists delete Delete dataset Usage: cli dataset delete [OPTIONS] DATASET_ID Options: -m, --mode TEXT What datasets to create [all|staging|prod] init Initialize metadata files of dataset Usage: cli dataset init [OPTIONS] DATASET_ID Options: --replace Whether to replace current metadata files publicize Make a dataset public Usage: cli dataset publicize [OPTIONS] DATASET_ID update Update dataset on BigQuery Usage: cli dataset update [OPTIONS] DATASET_ID Options: -m, --mode TEXT What datasets to create [all|staging|prod] download Download data. You can add extra arguments accepted by pandas.to_csv . Examples: --delimiter='|', --index=False Usage: cli download [OPTIONS] SAVEPATH Options: --dataset_id TEXT Dataset_id, enter with table_id to download table --table_id TEXT Table_id, enter with dataset_id to download table --query TEXT A SQL Standard query to download data from BigQuery --query_project_id TEXT Which project the table lives. You can change this you want to query different projects. --billing_project_id TEXT Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectsele ctor2/home/dashboard --limit TEXT Number of rows returned storage Usage: cli storage [OPTIONS] COMMAND [ARGS]... init Create bucket and initial folders Usage: cli storage init [OPTIONS] Options: --bucket_name TEXT Bucket name --replace Whether to replace current bucket files --very-sure / --not-sure Are you sure that you want to replace current bucket files? upload Upload file to bucket Usage: cli storage upload [OPTIONS] DATASET_ID TABLE_ID FILEPATH Options: -m, --mode TEXT [raw|staging] where to save the file [required] --partitions TEXT Data partition as `value=key/value2=key2` --if_exists TEXT [raise|replace|pass] if file alread exists table Usage: cli table [OPTIONS] COMMAND [ARGS]... append Append new data to existing table Usage: cli table append [OPTIONS] DATASET_ID TABLE_ID FILEPATH Options: --partitions TEXT Data partition as `value=key/value2=key2` --if_exists TEXT [raise|replace|pass] if file alread exists create Create stagging table in BigQuery Usage: cli table create [OPTIONS] DATASET_ID TABLE_ID Options: -p, --path PATH Path of data folder or file. --job_config_params TEXT File to advanced load config params --partitioned [True|False] whether folder has partitions --if_exists TEXT [raise|replace|pass] actions if table exists --force_dataset TEXT Whether to automatically create the dataset folders and in BigQuery delete Delete BigQuery table Usage: cli table delete [OPTIONS] DATASET_ID TABLE_ID Options: --mode TEXT Which table to delete [all|prod|staging] [required] init Create metadata files Usage: cli table init [OPTIONS] DATASET_ID TABLE_ID Options: --data_sample_path PATH Sample data used to pre-fill metadata --if_exists TEXT [raise|replace|pass] actions if table folder exists publish Publish staging table to prod Usage: cli table publish [OPTIONS] DATASET_ID TABLE_ID Options: --if_exists TEXT [raise|replace] actions if table exists update Update tables in BigQuery Usage: cli table update [OPTIONS] DATASET_ID TABLE_ID Options: --mode TEXT Choose a table from a dataset to update [all|staging|prod]","title":"CLI"},{"location":"cli_reference_api/#cli-api","text":"Esta API \u00e9 composta de comandos para gerenciamento e inser\u00e7\u00e3o de dados no Google Cloud. Os comandos dispon\u00edveis dentro de cli atualmente s\u00e3o: config , que \u00e9 utilizado para atualizar seus dados de configura\u00e7\u00e3o e gerenciar templates dataset , que permite gerenciar datasets no BigQuery (criar, modificar, publicar , atualizar e deletar) download , que permite baixar/salvar queries de tabelas do BigQuery na sua m\u00e1quina local storage , que permite gerenciar seu Storage no BigQuery (criar e subir arquivos) table , que permite gerenciar tabelas no BigQuery (criar, modificar, publicar , atualizar e deletar) Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas","title":"CLI API"},{"location":"cli_reference_api/#cli","text":"Usage: cli [OPTIONS] COMMAND [ARGS]... Options: --templates TEXT Templates path --bucket_name TEXT Project bucket name --metadata_path TEXT Folder to store metadata","title":"cli"},{"location":"cli_reference_api/#config","text":"Usage: cli config [OPTIONS] COMMAND [ARGS]...","title":"config"},{"location":"cli_reference_api/#overwrite_cli_config","text":"Overwrite current configuration Usage: cli config overwrite_cli_config [OPTIONS]","title":"overwrite_cli_config"},{"location":"cli_reference_api/#refresh_template","text":"Overwrite current templates Usage: cli config refresh_template [OPTIONS]","title":"refresh_template"},{"location":"cli_reference_api/#dataset","text":"Usage: cli dataset [OPTIONS] COMMAND [ARGS]...","title":"dataset"},{"location":"cli_reference_api/#create","text":"Create dataset on BigQuery Usage: cli dataset create [OPTIONS] DATASET_ID Options: -m, --mode TEXT What datasets to create [all|staging|prod] --if_exists TEXT [raise|update|replace|pass] if dataset alread exists","title":"create"},{"location":"cli_reference_api/#delete","text":"Delete dataset Usage: cli dataset delete [OPTIONS] DATASET_ID Options: -m, --mode TEXT What datasets to create [all|staging|prod]","title":"delete"},{"location":"cli_reference_api/#init","text":"Initialize metadata files of dataset Usage: cli dataset init [OPTIONS] DATASET_ID Options: --replace Whether to replace current metadata files","title":"init"},{"location":"cli_reference_api/#publicize","text":"Make a dataset public Usage: cli dataset publicize [OPTIONS] DATASET_ID","title":"publicize"},{"location":"cli_reference_api/#update","text":"Update dataset on BigQuery Usage: cli dataset update [OPTIONS] DATASET_ID Options: -m, --mode TEXT What datasets to create [all|staging|prod]","title":"update"},{"location":"cli_reference_api/#download","text":"Download data. You can add extra arguments accepted by pandas.to_csv . Examples: --delimiter='|', --index=False Usage: cli download [OPTIONS] SAVEPATH Options: --dataset_id TEXT Dataset_id, enter with table_id to download table --table_id TEXT Table_id, enter with dataset_id to download table --query TEXT A SQL Standard query to download data from BigQuery --query_project_id TEXT Which project the table lives. You can change this you want to query different projects. --billing_project_id TEXT Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectsele ctor2/home/dashboard --limit TEXT Number of rows returned","title":"download"},{"location":"cli_reference_api/#storage","text":"Usage: cli storage [OPTIONS] COMMAND [ARGS]...","title":"storage"},{"location":"cli_reference_api/#init_1","text":"Create bucket and initial folders Usage: cli storage init [OPTIONS] Options: --bucket_name TEXT Bucket name --replace Whether to replace current bucket files --very-sure / --not-sure Are you sure that you want to replace current bucket files?","title":"init"},{"location":"cli_reference_api/#upload","text":"Upload file to bucket Usage: cli storage upload [OPTIONS] DATASET_ID TABLE_ID FILEPATH Options: -m, --mode TEXT [raw|staging] where to save the file [required] --partitions TEXT Data partition as `value=key/value2=key2` --if_exists TEXT [raise|replace|pass] if file alread exists","title":"upload"},{"location":"cli_reference_api/#table","text":"Usage: cli table [OPTIONS] COMMAND [ARGS]...","title":"table"},{"location":"cli_reference_api/#append","text":"Append new data to existing table Usage: cli table append [OPTIONS] DATASET_ID TABLE_ID FILEPATH Options: --partitions TEXT Data partition as `value=key/value2=key2` --if_exists TEXT [raise|replace|pass] if file alread exists","title":"append"},{"location":"cli_reference_api/#create_1","text":"Create stagging table in BigQuery Usage: cli table create [OPTIONS] DATASET_ID TABLE_ID Options: -p, --path PATH Path of data folder or file. --job_config_params TEXT File to advanced load config params --partitioned [True|False] whether folder has partitions --if_exists TEXT [raise|replace|pass] actions if table exists --force_dataset TEXT Whether to automatically create the dataset folders and in BigQuery","title":"create"},{"location":"cli_reference_api/#delete_1","text":"Delete BigQuery table Usage: cli table delete [OPTIONS] DATASET_ID TABLE_ID Options: --mode TEXT Which table to delete [all|prod|staging] [required]","title":"delete"},{"location":"cli_reference_api/#init_2","text":"Create metadata files Usage: cli table init [OPTIONS] DATASET_ID TABLE_ID Options: --data_sample_path PATH Sample data used to pre-fill metadata --if_exists TEXT [raise|replace|pass] actions if table folder exists","title":"init"},{"location":"cli_reference_api/#publish","text":"Publish staging table to prod Usage: cli table publish [OPTIONS] DATASET_ID TABLE_ID Options: --if_exists TEXT [raise|replace] actions if table exists","title":"publish"},{"location":"cli_reference_api/#update_1","text":"Update tables in BigQuery Usage: cli table update [OPTIONS] DATASET_ID TABLE_ID Options: --mode TEXT Choose a table from a dataset to update [all|staging|prod]","title":"update"},{"location":"data_naming_rules/","text":"Diretrizes de nomes para tabelas e conjuntos As bases devem ser organizadas no BigQuery de maneira consistente , que permita uma busca f\u00e1cil e intuitiva , e seja escal\u00e1vel . As diretrizes definidas para nomenclatura dos conjuntos ( datasets ) e tabelas ( tables ) est\u00e3o descritas abaixo. O BigQuery permite busca por nome da tabela, conjunto ou r\u00f3tulo ( label ), incluindo correspond\u00eancias parciais. Conjunto ( dataset ) Tabela ( table ) Mundial mundo_<instituicao>_<descricao> <descricao> Federal <pais_sigla>_<instituicao>_<descricao> <descricao> Estadual <pais_sigla>_<estado_sigla>_<instituicao>_<descricao> <descricao> Municipal <pais_sigla>_<estado_sigla>_<cidade>_<instituicao>_<descricao> <descricao> Os componentes dos nomes s\u00e3o: mundo/pais_sigla/estado_sigla/cidade : Abrang\u00eancia da institui\u00e7\u00e3o - e n\u00e3o os dados (ex: IBGE tem abrang\u00eancia br ) instituicao : Nome ou sigla (de prefer\u00eancia) da institui\u00e7\u00e3o que publicou os dados orginais. descricao : Nome descritivo e \u00fanico para cada tabela e dataset (nome da tabela basta ser \u00fanico dentro do datatset ). Se atente ao modo de escrita Utilize somente letras min\u00fasculas Remova acentos, pontua\u00e7\u00f5es e espa\u00e7os Separe palavras por _ N\u00e3o sabe como nomear a institui\u00e7\u00e3o? Sugerimos que v\u00e1 no site da mesma e veja como ela se autodenomina (ex: DETRAN-RJ seria br-rj-detran-rj ) Exemplos Mundial mundo_waze.alertas Dados de alertas do Waze de diferentes cidades. Federal br_tse_eleicoes.candidatos Dados de candidatos a cargos pol\u00edticos do TSE. Federal br_ibge_pnad.pnad_microdados Microdados da Pesquisa Nacional por Amostra de Domic\u00edlios produzidos pelo IBGE. Federal br_ibge_pnad.pnad_cont\u00ednua_microdados Microdados da Pesquisa Nacional por Amostra de Domic\u00edlios Cont\u00ednua (PNAD-C) produzidos pelo IBGE. Estadual br_sp_see_docentes.carga_horaria Carga hor\u00e1ria anonimizado de docentes ativos da rede estadual de ensino de SP. Municipal br_rj_riodejaneiro_cmrj_legislativo.votacoes Dados de vota\u00e7\u00e3o da C\u00e2mara Municipal do Rio de Janeiro (RJ). Bases Desejadas Lista de bases mapeadas que est\u00e3o no nosso mapa. Cada base a ser adicionada possui uma issue relacionada no Github - acompanhe e contribua ! Temas e Identificadores OS identificadores listados abaixo s\u00e3o os mesmos do mecanismo de busca da Base dos Dados, mas temas podem ser adicionados e trocados. O BigQuery permite que sejam adicionados r\u00f3tulos ( labels ) \u00e0s tabelas, que tamb\u00e9m funcionam para a busca de dados. Os r\u00f3tulos ainda n\u00e3o s\u00e3o obrigat\u00f3rios, sugerimos a busca pela institui\u00e7\u00e3o ou descri\u00e7\u00e3o dos dados. Tema Identificador (r\u00f3tulo) Agropecu\u00e1ria agropecuaria Ci\u00eancia, Tecnologia e Inova\u00e7\u00e3o ciencia-tec-inov Cultura e Arte cultura-arte Diversidade e Inclus\u00e3o diversidade Educa\u00e7\u00e3o educacao Energia energia Esportes esportes Economia economia Governo e Finan\u00e7as P\u00fablicas gov-fin-pub Hist\u00f3ria historia Infraestrutura e Transportes infra-transp Jornalismo e Comunica\u00e7\u00e3o comunicacao Meio Ambiente meio-ambiente Justi\u00e7a justica Organiza\u00e7\u00e3o Territorial territorio Pol\u00edtica politica Popula\u00e7\u00e3o populacao Religi\u00e3o religiao Seguran\u00e7a, Crime, Viol\u00eancia e Conflito seguranca Sa\u00fade saude Turismo turismo Urbaniza\u00e7\u00e3o urbanizacao","title":"Conjuntos e tabelas"},{"location":"data_naming_rules/#diretrizes-de-nomes-para-tabelas-e-conjuntos","text":"As bases devem ser organizadas no BigQuery de maneira consistente , que permita uma busca f\u00e1cil e intuitiva , e seja escal\u00e1vel . As diretrizes definidas para nomenclatura dos conjuntos ( datasets ) e tabelas ( tables ) est\u00e3o descritas abaixo. O BigQuery permite busca por nome da tabela, conjunto ou r\u00f3tulo ( label ), incluindo correspond\u00eancias parciais. Conjunto ( dataset ) Tabela ( table ) Mundial mundo_<instituicao>_<descricao> <descricao> Federal <pais_sigla>_<instituicao>_<descricao> <descricao> Estadual <pais_sigla>_<estado_sigla>_<instituicao>_<descricao> <descricao> Municipal <pais_sigla>_<estado_sigla>_<cidade>_<instituicao>_<descricao> <descricao> Os componentes dos nomes s\u00e3o: mundo/pais_sigla/estado_sigla/cidade : Abrang\u00eancia da institui\u00e7\u00e3o - e n\u00e3o os dados (ex: IBGE tem abrang\u00eancia br ) instituicao : Nome ou sigla (de prefer\u00eancia) da institui\u00e7\u00e3o que publicou os dados orginais. descricao : Nome descritivo e \u00fanico para cada tabela e dataset (nome da tabela basta ser \u00fanico dentro do datatset ). Se atente ao modo de escrita Utilize somente letras min\u00fasculas Remova acentos, pontua\u00e7\u00f5es e espa\u00e7os Separe palavras por _ N\u00e3o sabe como nomear a institui\u00e7\u00e3o? Sugerimos que v\u00e1 no site da mesma e veja como ela se autodenomina (ex: DETRAN-RJ seria br-rj-detran-rj )","title":"Diretrizes de nomes para tabelas e conjuntos"},{"location":"data_naming_rules/#exemplos","text":"Mundial mundo_waze.alertas Dados de alertas do Waze de diferentes cidades. Federal br_tse_eleicoes.candidatos Dados de candidatos a cargos pol\u00edticos do TSE. Federal br_ibge_pnad.pnad_microdados Microdados da Pesquisa Nacional por Amostra de Domic\u00edlios produzidos pelo IBGE. Federal br_ibge_pnad.pnad_cont\u00ednua_microdados Microdados da Pesquisa Nacional por Amostra de Domic\u00edlios Cont\u00ednua (PNAD-C) produzidos pelo IBGE. Estadual br_sp_see_docentes.carga_horaria Carga hor\u00e1ria anonimizado de docentes ativos da rede estadual de ensino de SP. Municipal br_rj_riodejaneiro_cmrj_legislativo.votacoes Dados de vota\u00e7\u00e3o da C\u00e2mara Municipal do Rio de Janeiro (RJ).","title":"Exemplos"},{"location":"data_naming_rules/#bases-desejadas","text":"Lista de bases mapeadas que est\u00e3o no nosso mapa. Cada base a ser adicionada possui uma issue relacionada no Github - acompanhe e contribua !","title":"Bases Desejadas"},{"location":"data_naming_rules/#temas-e-identificadores","text":"OS identificadores listados abaixo s\u00e3o os mesmos do mecanismo de busca da Base dos Dados, mas temas podem ser adicionados e trocados. O BigQuery permite que sejam adicionados r\u00f3tulos ( labels ) \u00e0s tabelas, que tamb\u00e9m funcionam para a busca de dados. Os r\u00f3tulos ainda n\u00e3o s\u00e3o obrigat\u00f3rios, sugerimos a busca pela institui\u00e7\u00e3o ou descri\u00e7\u00e3o dos dados. Tema Identificador (r\u00f3tulo) Agropecu\u00e1ria agropecuaria Ci\u00eancia, Tecnologia e Inova\u00e7\u00e3o ciencia-tec-inov Cultura e Arte cultura-arte Diversidade e Inclus\u00e3o diversidade Educa\u00e7\u00e3o educacao Energia energia Esportes esportes Economia economia Governo e Finan\u00e7as P\u00fablicas gov-fin-pub Hist\u00f3ria historia Infraestrutura e Transportes infra-transp Jornalismo e Comunica\u00e7\u00e3o comunicacao Meio Ambiente meio-ambiente Justi\u00e7a justica Organiza\u00e7\u00e3o Territorial territorio Pol\u00edtica politica Popula\u00e7\u00e3o populacao Religi\u00e3o religiao Seguran\u00e7a, Crime, Viol\u00eancia e Conflito seguranca Sa\u00fade saude Turismo turismo Urbaniza\u00e7\u00e3o urbanizacao","title":"Temas e Identificadores"},{"location":"github/","text":"Apoie o projeto \ud83d\udcb8 O projeto \u00e9 todo feito por volunt\u00e1rios, mas ainda temos custos de infraestrutura. Nos ajude a manter esse lindo trabalho nas esquinas virtuais. Fa\u00e7a desenvolvedores felizes Adicione bases \ud83c\udfb2 Incentivamos que outras institui\u00e7\u00f5es e pessoas contribuam. S\u00f3 \u00e9 requerido que o processo de captura e tratamento sejam p\u00fablicos e documentados, e a inser\u00e7\u00e3o dos dados no BigQuery siga nossa metodologia. Entre em contato conosco para colaborar: contato@basedosdados.org Ajude a manter nosso c\u00f3digo \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb Precisamos de ajuda para manter e melhorar nossos clientes Python, R, entre outros. Acesse nossos issues ou abra um novo para come\u00e7ar a desenvolver :)","title":"Como contribuir"},{"location":"github/#apoie-o-projeto","text":"O projeto \u00e9 todo feito por volunt\u00e1rios, mas ainda temos custos de infraestrutura. Nos ajude a manter esse lindo trabalho nas esquinas virtuais. Fa\u00e7a desenvolvedores felizes","title":"Apoie o projeto \ud83d\udcb8"},{"location":"github/#adicione-bases","text":"Incentivamos que outras institui\u00e7\u00f5es e pessoas contribuam. S\u00f3 \u00e9 requerido que o processo de captura e tratamento sejam p\u00fablicos e documentados, e a inser\u00e7\u00e3o dos dados no BigQuery siga nossa metodologia. Entre em contato conosco para colaborar: contato@basedosdados.org","title":"Adicione bases \ud83c\udfb2"},{"location":"github/#ajude-a-manter-nosso-codigo","text":"Precisamos de ajuda para manter e melhorar nossos clientes Python, R, entre outros. Acesse nossos issues ou abra um novo para come\u00e7ar a desenvolver :)","title":"Ajude a manter nosso c\u00f3digo \ud83d\udc69\ud83c\udffb\u200d\ud83d\udcbb"},{"location":"py_reference_api/","text":"Python API Esta API \u00e9 composta de m\u00f3dulos para requisi\u00e7\u00e3o de dados : : download , que permite baixar tabelas do BigQuery em CSV direto na sua m\u00e1quina. read_sql , que permite fazer uma query SQL e carregar os dados no ambiente do Python. read_table , que permite ler uma tabela do BigQuery pelo nome e carregar os dados no ambiente do Python. E tamb\u00e9m de classes para gerenciamento de dados no Google Cloud: Storage , que permite manusear arquivos no Storage Dataset , que permite manusear datasets no BigQuery Table , que permite manusear tables Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas M\u00f3dulos download ( savepath , query = None , dataset_id = None , table_id = None , query_project_id = 'basedosdados' , billing_project_id = None , limit = None , reauth = False , ** pandas_kwargs ) Download table or query result from basedosdados BigQuery (or other). Using a query : download('select * from basedosdados.br_suporte.diretorio_municipios limit 10') Using dataset_id & table_id : download(dataset_id='br_suporte', table_id='diretorio_municipios') You can also add arguments to modify save parameters: download(dataset_id='br_suporte', table_id='diretorio_municipios', index=False, sep='|') Parameters: Name Type Description Default savepath str, pathlib.PosixPath If savepath is a folder, it saves a file as savepath / table_id.csv or savepath / query_result.csv if table_id not available. If savepath is a file, saves data to file. required query str Optional. Valid SQL Standard Query to basedosdados. If query is available, dataset_id and table_id are not required. None dataset_id str Optional. Dataset id available in basedosdados. It should always come with table_id. None table_id str Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. None query_project_id str Optional. Which project the table lives. You can change this you want to query different projects. 'basedosdados' billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None limit int Optional Number of rows. None reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False pandas_kwargs Extra arguments accepted by pandas.to_csv {} Exceptions: Type Description Exception If either table_id or dataset_id were are empty. Source code in basedosdados/download.py def download ( savepath , query = None , dataset_id = None , table_id = None , query_project_id = \"basedosdados\" , billing_project_id = None , limit = None , reauth = False , ** pandas_kwargs , ): \"\"\"Download table or query result from basedosdados BigQuery (or other). * Using a **query**: `download('select * from `basedosdados.br_suporte.diretorio_municipios` limit 10')` * Using **dataset_id & table_id**: `download(dataset_id='br_suporte', table_id='diretorio_municipios')` You can also add arguments to modify save parameters: `download(dataset_id='br_suporte', table_id='diretorio_municipios', index=False, sep='|')` Args: savepath (str, pathlib.PosixPath): If savepath is a folder, it saves a file as `savepath / table_id.csv` or `savepath / query_result.csv` if table_id not available. If savepath is a file, saves data to file. query (str): Optional. Valid SQL Standard Query to basedosdados. If query is available, dataset_id and table_id are not required. dataset_id (str): Optional. Dataset id available in basedosdados. It should always come with table_id. table_id (str): Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. query_project_id (str): Optional. Which project the table lives. You can change this you want to query different projects. billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard limit (int): Optional Number of rows. reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. pandas_kwargs (): Extra arguments accepted by [pandas.to_csv](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html) Raises: Exception: If either table_id or dataset_id were are empty. \"\"\" savepath = Path ( savepath ) if ( dataset_id is not None ) and ( table_id is not None ): table = read_table ( dataset_id , table_id , query_project_id = query_project_id , billing_project_id = billing_project_id , limit = limit , reauth = reauth , ) elif query is not None : query += f \" limit { limit } \" if limit is not None else \"\" table = read_sql ( query , billing_project_id = billing_project_id , reauth = reauth ) elif query is None : raise BaseDosDadosException ( \"Either table_id, dataset_id or query should be filled.\" ) if savepath . is_dir (): if table_id is not None : savepath = savepath / ( table_id + \".csv\" ) else : savepath = savepath / ( \"query_result.csv\" ) table . to_csv ( savepath , ** pandas_kwargs ) read_sql ( query , billing_project_id = None , reauth = False ) Load data from BigQuery using a query. Just a wrapper around pandas.read_gbq Parameters: Name Type Description Default query sql Valid SQL Standard Query to basedosdados required billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False Returns: Type Description pd.DataFrame Query result Source code in basedosdados/download.py def read_sql ( query , billing_project_id = None , reauth = False ): \"\"\"Load data from BigQuery using a query. Just a wrapper around pandas.read_gbq Args: query (sql): Valid SQL Standard Query to basedosdados billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. Returns: pd.DataFrame: Query result \"\"\" try : return pandas_gbq . read_gbq ( query , credentials = credentials ( reauth = reauth ), project_id = billing_project_id , ) except ( OSError , ValueError ): raise BaseDosDadosException ( \" \\n We are not sure which Google Cloud project should be billed. \\n \" \"First, you should make sure that you have a Google Cloud project. \\n \" \"If you don't have one, set one up following these steps: \\n \" \" \\t 1. Go to this link https://console.cloud.google.com/projectselector2/home/dashboard \\n \" \" \\t 2. Agree with Terms of Service if asked \\n \" \" \\t 3. Click in Create Project \\n \" \" \\t 4. Put a cool name in your project \\n \" \" \\t 5. Hit create \\n \" \"\" \"Copy the Project ID, (notice that it is not the Project Name) \\n \" \"Now, you have two options: \\n \" \"1. Add an argument to your function poiting to the billing project id. \\n \" \" Like `bd.read_table('br_ibge_pib', 'municipios', billing_project_id=<YOUR_PROJECT_ID>)` \\n \" \"2. You can set a project_id in the environment by running the following command in your terminal: `gcloud config set project <YOUR_PROJECT_ID>`.\" \" Bear in mind that you need `gcloud` installed.\" ) except GenericGBQException as e : if \"Reason: 403\" in str ( e ): raise BaseDosDadosException ( \" \\n You still don't have a Google Cloud Project. \\n \" \"Set one up following these steps: \\n \" \"1. Go to this link https://console.cloud.google.com/projectselector2/home/dashboard \\n \" \"2. Agree with Terms of Service if asked \\n \" \"3. Click in Create Project \\n \" \"4. Put a cool name in your project \\n \" \"5. Hit create \\n \" \"6. Rerun this command with the flag `reauth=True`. \\n \" \" Like `read_table('br_ibge_pib', 'municipios', reauth=True)`\" ) else : raise e read_table ( dataset_id , table_id , query_project_id = 'basedosdados' , billing_project_id = None , limit = None , reauth = False ) Load data from BigQuery using dataset_id and table_id. Parameters: Name Type Description Default dataset_id str Optional. Dataset id available in basedosdados. It should always come with table_id. required table_id str Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. required query_project_id str Optional. Which project the table lives. You can change this you want to query different projects. 'basedosdados' billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False limit int Optional. Number of rows to read from table. None Returns: Type Description pd.DataFrame Query result Source code in basedosdados/download.py def read_table ( dataset_id , table_id , query_project_id = \"basedosdados\" , billing_project_id = None , limit = None , reauth = False , ): \"\"\"Load data from BigQuery using dataset_id and table_id. Args: dataset_id (str): Optional. Dataset id available in basedosdados. It should always come with table_id. table_id (str): Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. query_project_id (str): Optional. Which project the table lives. You can change this you want to query different projects. billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. limit (int): Optional. Number of rows to read from table. Returns: pd.DataFrame: Query result \"\"\" if ( dataset_id is not None ) and ( table_id is not None ): query = f \"\"\" SELECT * FROM ` { query_project_id } . { dataset_id } . { table_id } `\"\"\" if limit is not None : query += f \" LIMIT { limit } \" else : raise BaseDosDadosException ( \"Both table_id and dataset_id should be filled.\" ) return read_sql ( query , billing_project_id = billing_project_id , reauth = reauth ) Classes Storage Manage files on Google Cloud Storage. delete_file ( self , filename , mode , partitions = None , not_found_ok = False ) Deletes file from path <bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename> . Parameters: Name Type Description Default filename str Name of the file to be deleted required mode str Folder of which dataset to update [raw|staging|all] required partitions str, pathlib.PosixPath, or dict Optional. Hive structured partition as a string or dict str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None not_found_ok bool Optional. What to do if file not found False Source code in basedosdados/storage.py def delete_file ( self , filename , mode , partitions = None , not_found_ok = False ): \"\"\"Deletes file from path `<bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename>`. Args: filename (str): Name of the file to be deleted mode (str): Folder of which dataset to update [raw|staging|all] partitions (str, pathlib.PosixPath, or dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` not_found_ok (bool): Optional. What to do if file not found \"\"\" self . _check_mode ( mode ) if mode == \"all\" : mode = [ \"raw\" , \"staging\" ] else : mode = [ mode ] for m in mode : blob = self . bucket . blob ( self . _build_blob_name ( filename , m , partitions )) if blob . exists (): blob . delete () elif not_found_ok : return else : blob . delete () init ( self , replace = False , very_sure = False ) Initializes bucket and folders. Folder should be: raw : that contains really raw data staging : preprocessed data ready to upload to BigQuery Parameters: Name Type Description Default replace bool Optional. Whether to replace if bucket already exists False very_sure bool Optional. Are you aware that everything is going to be erased if you replace the bucket? False Exceptions: Type Description Warning very_sure argument is still False. Source code in basedosdados/storage.py def init ( self , replace = False , very_sure = False ): \"\"\"Initializes bucket and folders. Folder should be: * `raw` : that contains really raw data * `staging` : preprocessed data ready to upload to BigQuery Args: replace (bool): Optional. Whether to replace if bucket already exists very_sure (bool): Optional. Are you aware that everything is going to be erased if you replace the bucket? Raises: Warning: very_sure argument is still False. \"\"\" if replace : if not very_sure : raise Warning ( \" \\n ********************************************************\" \" \\n You are trying to replace all the data that you have \" f \"in bucket { self . bucket_name } . \\n Are you sure? \\n \" \"If yes, add the flag --very_sure \\n \" \"********************************************************\" ) else : self . bucket . delete ( force = True ) self . client [ \"storage_staging\" ] . create_bucket ( self . bucket ) for folder in [ \"staging/\" , \"raw/\" ]: self . bucket . blob ( folder ) . upload_from_string ( \"\" ) upload ( self , path , mode = 'all' , partitions = None , if_exists = 'raise' , ** upload_args ) Upload to storage at <bucket_name>/<mode>/<dataset_id>/<table_id> . You can: Add a single file setting path = <file_path> . Add a folder with multiple files setting path = <folder_path> . The folder should just contain the files and no folders. Add partitioned files setting path = <folder_path> . This folder must follow the hive partitioning scheme i.e. <table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv (ex: mytable/country=brasil/year=2020/mypart.csv ). Remember all files must follow a single schema. Otherwise, things might fail in the future. There are 3 modes: raw : should contain raw files from datasource staging : should contain pre-treated files ready to upload to BiqQuery all : if no treatment is needed, use all . Parameters: Name Type Description Default path str or pathlib.PosixPath Where to find the file or folder that you want to upload to storage required mode str Folder of which dataset to update [raw|staging|all] 'all' partitions str, pathlib.PosixPath, or dict Optional. If adding a single file , use this to add it to a specific partition. str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None if_exists str Optional. What to do if data exists 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' upload_args Extra arguments accepted by google.cloud.storage.blob.Blob.upload_from_file {} Source code in basedosdados/storage.py def upload ( self , path , mode = \"all\" , partitions = None , if_exists = \"raise\" , ** upload_args , ): \"\"\"Upload to storage at `<bucket_name>/<mode>/<dataset_id>/<table_id>`. You can: * Add a single **file** setting `path = <file_path>`. * Add a **folder** with multiple files setting `path = <folder_path>`. *The folder should just contain the files and no folders.* * Add **partitioned files** setting `path = <folder_path>`. This folder must follow the hive partitioning scheme i.e. `<table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv` (ex: `mytable/country=brasil/year=2020/mypart.csv`). *Remember all files must follow a single schema.* Otherwise, things might fail in the future. There are 3 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `all`: if no treatment is needed, use `all`. Args: path (str or pathlib.PosixPath): Where to find the file or folder that you want to upload to storage mode (str): Folder of which dataset to update [raw|staging|all] partitions (str, pathlib.PosixPath, or dict): Optional. *If adding a single file*, use this to add it to a specific partition. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): Optional. What to do if data exists * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing upload_args (): Extra arguments accepted by [`google.cloud.storage.blob.Blob.upload_from_file`](https://googleapis.dev/python/storage/latest/blobs.html?highlight=upload_from_filename#google.cloud.storage.blob.Blob.upload_from_filename) \"\"\" if ( self . dataset_id is None ) or ( self . table_id is None ): raise Exception ( \"You need to pass dataset_id and table_id\" ) path = Path ( path ) if path . is_dir (): paths = [ f for f in path . glob ( \"**/*\" ) if f . is_file () and f . suffix == \".csv\" ] parts = [ ( str ( filepath ) . replace ( str ( path ) + \"/\" , \"\" ) . replace ( str ( filepath . name ), \"\" ) ) for filepath in paths ] else : paths = [ path ] parts = [ partitions or None ] self . _check_mode ( mode ) if mode == \"all\" : mode = [ \"raw\" , \"staging\" ] else : mode = [ mode ] for m in mode : for filepath , part in tqdm ( list ( zip ( paths , parts )), desc = \"Uploading files\" ): blob_name = self . _build_blob_name ( filepath . name , m , part ) blob = self . bucket . blob ( blob_name ) if not blob . exists () or if_exists == \"replace\" : upload_args [ \"timeout\" ] = upload_args . get ( \"timeout\" , None ) blob . upload_from_filename ( str ( filepath ), ** upload_args ) else : raise Exception ( f \"Data already exists at { self . bucket_name } / { blob_name } . \" \"Set if_exists to 'replace' to overwrite data\" ) Dataset Manage datasets in BigQuery. create ( self , mode = 'all' , if_exists = 'raise' ) Creates BigQuery datasets given dataset_id . It can create two datasets: <dataset_id> (mode = 'prod') <dataset_id>_staging (mode = 'staging') If mode is all, it creates both. Parameters: Name Type Description Default mode str Optional. Which dataset to create [prod|staging|all]. 'all' if_exists str Optional. What to do if dataset exists raise : Raises Conflic exception replace : Drop all tables and replace dataset update : Update dataset description pass : Do nothing 'raise' Exceptions: Type Description Warning Dataset already exists and if_exists is set to raise Source code in basedosdados/dataset.py def create ( self , mode = \"all\" , if_exists = \"raise\" ): \"\"\"Creates BigQuery datasets given `dataset_id`. It can create two datasets: * `<dataset_id>` (mode = 'prod') * `<dataset_id>_staging` (mode = 'staging') If `mode` is all, it creates both. Args: mode (str): Optional. Which dataset to create [prod|staging|all]. if_exists (str): Optional. What to do if dataset exists * raise : Raises Conflic exception * replace : Drop all tables and replace dataset * update : Update dataset description * pass : Do nothing Raises: Warning: Dataset already exists and if_exists is set to `raise` \"\"\" if if_exists == \"replace\" : self . delete ( mode ) elif if_exists == \"update\" : self . update () return # Set dataset_id to the ID of the dataset to create. for m in self . _loop_modes ( mode ): # Construct a full Dataset object to send to the API. dataset_obj = self . _setup_dataset_object ( m [ \"id\" ]) # Send the dataset to the API for creation, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. try : job = m [ \"client\" ] . create_dataset ( dataset_obj ) # Make an API request. except Conflict : if if_exists == \"pass\" : return else : raise Conflict ( f \"Dataset { self . dataset_id } already exists\" ) # Make prod dataset public self . publicize () delete ( self , mode = 'all' ) Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Parameters: Name Type Description Default mode str Optional. Which dataset to delete [prod|staging|all] 'all' Source code in basedosdados/dataset.py def delete ( self , mode = \"all\" ): \"\"\"Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Args: mode (str): Optional. Which dataset to delete [prod|staging|all] \"\"\" for m in self . _loop_modes ( mode ): m [ \"client\" ] . delete_dataset ( m [ \"id\" ], delete_contents = True , not_found_ok = True ) init ( self , replace = False ) Initialize dataset folder at metadata_path at metadata_path/<dataset_id> . The folder should contain: dataset_config.yaml README.md Parameters: Name Type Description Default replace str Optional. Whether to replace existing folder. False Exceptions: Type Description FileExistsError If dataset folder already exists and replace is False Source code in basedosdados/dataset.py def init ( self , replace = False ): \"\"\"Initialize dataset folder at metadata_path at `metadata_path/<dataset_id>`. The folder should contain: * `dataset_config.yaml` * `README.md` Args: replace (str): Optional. Whether to replace existing folder. Raises: FileExistsError: If dataset folder already exists and replace is False \"\"\" # Create dataset folder try : self . dataset_folder . mkdir ( exist_ok = replace , parents = True ) except FileExistsError : raise FileExistsError ( f \"Dataset { str ( self . dataset_folder . stem ) } folder does not exists. \" \"Set replace=True to replace current files.\" ) for file in ( Path ( self . templates ) / \"dataset\" ) . glob ( \"*\" ): if file . name in [ \"dataset_config.yaml\" , \"README.md\" ]: # Load and fill template template = self . _render_template ( f \"dataset/ { file . name } \" , dict ( dataset_id = self . dataset_id ) ) # Write file ( self . dataset_folder / file . name ) . open ( \"w\" ) . write ( template ) # Add code folder ( self . dataset_folder / \"code\" ) . mkdir ( exist_ok = replace , parents = True ) return self publicize ( self , mode = 'all' ) Changes IAM configuration to turn BigQuery dataset public. Parameters: Name Type Description Default mode bool Which dataset to create [prod|staging|all]. 'all' Source code in basedosdados/dataset.py def publicize ( self , mode = \"all\" ): \"\"\"Changes IAM configuration to turn BigQuery dataset public. Args: mode (bool): Which dataset to create [prod|staging|all]. \"\"\" for m in self . _loop_modes ( mode ): dataset = m [ \"client\" ] . get_dataset ( m [ \"id\" ]) entries = dataset . access_entries entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.metadataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.user\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) dataset . access_entries = entries m [ \"client\" ] . update_dataset ( dataset , [ \"access_entries\" ]) update ( self , mode = 'all' ) Update dataset description. Toogle mode to choose which dataset to update. Parameters: Name Type Description Default mode str Optional. Which dataset to update [prod|staging|all] 'all' Source code in basedosdados/dataset.py def update ( self , mode = \"all\" ): \"\"\"Update dataset description. Toogle mode to choose which dataset to update. Args: mode (str): Optional. Which dataset to update [prod|staging|all] \"\"\" for m in self . _loop_modes ( mode ): # Send the dataset to the API to update, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. dataset = m [ \"client\" ] . update_dataset ( self . _setup_dataset_object ( m [ \"id\" ]), fields = [ \"description\" ] ) # Make an API request. Table Manage tables in Google Cloud Storage and BigQuery. append ( self , filepath , partitions = None , if_exists = 'raise' , ** upload_args ) Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Parameters: Name Type Description Default filepath str or pathlib.PosixPath Where to find the file that you want to upload to create a table with required partitions str, pathlib.PosixPath, dict Optional. Hive structured partition as a string or dict str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None if_exists str 0ptional. What to do if data with same name exists in storage 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' Source code in basedosdados/table.py def append ( self , filepath , partitions = None , if_exists = \"raise\" , ** upload_args ): \"\"\"Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Args: filepath (str or pathlib.PosixPath): Where to find the file that you want to upload to create a table with partitions (str, pathlib.PosixPath, dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): 0ptional. What to do if data with same name exists in storage * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing \"\"\" Storage ( self . dataset_id , self . table_id , ** self . main_vars ) . upload ( filepath , mode = \"staging\" , partitions = None , if_exists = if_exists , ** upload_args , ) self . create ( if_exists = \"replace\" ) create ( self , path = None , job_config_params = None , partitioned = False , if_exists = 'raise' , force_dataset = True ) Creates BigQuery table at staging dataset. If you add a path, it automatically saves the data in the storage, creates a datasets folder and BigQuery location, besides creating the table and its configuration files. The new table should be located at <dataset_id>_staging.<table_id> in BigQuery. It looks for data saved in Storage at <bucket_name>/staging/<dataset_id>/<table_id>/* and builds the table. It currently supports the types: - Comma Delimited CSV Data can also be partitioned following the hive partitioning scheme <key1>=<value1>/<key2>=<value2> , for instance, year=2012/country=BR Parameters: Name Type Description Default path str or pathlib.PosixPath Where to find the file that you want to upload to create a table with None job_config_params dict Optional. Job configuration params from bigquery None partitioned bool Optional. Whether data is partitioned False if_exists str Optional What to do if table exists 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' force_dataset bool Creates <dataset_id> folder and BigQuery Dataset if it doesn't exists. True Todo: * Implement if_exists=raise * Implement if_exists=pass Source code in basedosdados/table.py def create ( self , path = None , job_config_params = None , partitioned = False , if_exists = \"raise\" , force_dataset = True , ): \"\"\"Creates BigQuery table at staging dataset. If you add a path, it automatically saves the data in the storage, creates a datasets folder and BigQuery location, besides creating the table and its configuration files. The new table should be located at `<dataset_id>_staging.<table_id>` in BigQuery. It looks for data saved in Storage at `<bucket_name>/staging/<dataset_id>/<table_id>/*` and builds the table. It currently supports the types: - Comma Delimited CSV Data can also be partitioned following the hive partitioning scheme `<key1>=<value1>/<key2>=<value2>`, for instance, `year=2012/country=BR` Args: path (str or pathlib.PosixPath): Where to find the file that you want to upload to create a table with job_config_params (dict): Optional. Job configuration params from bigquery partitioned (bool): Optional. Whether data is partitioned if_exists (str): Optional What to do if table exists * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing force_dataset (bool): Creates `<dataset_id>` folder and BigQuery Dataset if it doesn't exists. Todo: * Implement if_exists=raise * Implement if_exists=pass \"\"\" # Add data to storage if isinstance ( path , ( str , PosixPath , ), ): Storage ( self . dataset_id , self . table_id , ** self . main_vars ) . upload ( path , mode = \"staging\" , if_exists = \"replace\" ) # Create Dataset if it doesn't exist if force_dataset : dataset_obj = Dataset ( self . dataset_id , ** self . main_vars ) try : dataset_obj . init () except FileExistsError : pass dataset_obj . create ( if_exists = \"pass\" ) self . init ( data_sample_path = path , if_exists = \"replace\" ) external_config = external_config = bigquery . ExternalConfig ( \"CSV\" ) external_config . options . skip_leading_rows = 1 external_config . options . allow_quoted_newlines = True external_config . options . allow_jagged_rows = True external_config . autodetect = False external_config . schema = self . _load_schema ( \"staging\" ) external_config . source_uris = ( f \"gs:// { self . bucket_name } /staging/ { self . dataset_id } / { self . table_id } /*\" ) if partitioned : hive_partitioning = bigquery . external_config . HivePartitioningOptions () hive_partitioning . mode = \"AUTO\" hive_partitioning . source_uri_prefix = self . uri . format ( dataset = self . dataset_id , table = self . table_id ) . replace ( \"*\" , \"\" ) external_config . hive_partitioning = hive_partitioning table = bigquery . Table ( self . table_full_name [ \"staging\" ]) table . external_data_configuration = external_config if if_exists == \"replace\" : self . delete ( mode = \"staging\" ) self . client [ \"bigquery_staging\" ] . create_table ( table ) table = bigquery . Table ( self . table_full_name [ \"staging\" ]) delete ( self , mode ) Deletes table in BigQuery. Parameters: Name Type Description Default mode str Table of which table to delete [prod|staging|all] required Source code in basedosdados/table.py def delete ( self , mode ): \"\"\"Deletes table in BigQuery. Args: mode (str): Table of which table to delete [prod|staging|all] \"\"\" self . _check_mode ( mode ) if mode == \"all\" : for m , n in self . table_full_name [ mode ] . items (): self . client [ f \"bigquery_ { m } \" ] . delete_table ( n , not_found_ok = True ) else : self . client [ f \"bigquery_ { mode } \" ] . delete_table ( self . table_full_name [ mode ], not_found_ok = True ) init ( self , data_sample_path = None , if_exists = 'raise' ) Initialize table folder at metadata_path at metadata_path/<dataset_id>/<table_id> . The folder should contain: table_config.yaml publish.sql You can also point to a sample of the data to auto complete columns names. Parameters: Name Type Description Default data_sample_path str, pathlib.PosixPath Optional. Data sample path to auto complete columns names It supports Comma Delimited CSV. None if_exists str Optional. What to do if table folder exists 'raise' : Raises FileExistsError 'replace' : Replace folder 'pass' : Do nothing 'raise' Exceptions: Type Description FileExistsError If folder exists and replace is False. NotImplementedError If data sample is not in supported type or format. Source code in basedosdados/table.py def init ( self , data_sample_path = None , if_exists = \"raise\" ): \"\"\"Initialize table folder at metadata_path at `metadata_path/<dataset_id>/<table_id>`. The folder should contain: * `table_config.yaml` * `publish.sql` You can also point to a sample of the data to auto complete columns names. Args: data_sample_path (str, pathlib.PosixPath): Optional. Data sample path to auto complete columns names It supports Comma Delimited CSV. if_exists (str): Optional. What to do if table folder exists * 'raise' : Raises FileExistsError * 'replace' : Replace folder * 'pass' : Do nothing Raises: FileExistsError: If folder exists and replace is False. NotImplementedError: If data sample is not in supported type or format. \"\"\" if not self . dataset_folder . exists (): raise FileExistsError ( f \"Dataset folder { self . dataset_folder } folder does not exists. \" \"Create a dataset before adding tables.\" ) try : self . table_folder . mkdir ( exist_ok = ( if_exists == \"replace\" )) except FileExistsError : if if_exists == \"raise\" : raise FileExistsError ( f \"Table folder already exists for { self . table_id } . \" ) elif if_exists == \"pass\" : return self partition_columns = [] if isinstance ( data_sample_path , ( str , PosixPath , ), ): # Check if partitioned and get data sample and partition columns data_sample_path = Path ( data_sample_path ) if data_sample_path . is_dir (): data_sample_path = [ f for f in data_sample_path . glob ( \"**/*\" ) if f . is_file () and f . suffix == \".csv\" ][ 0 ] partition_columns = [ k . split ( \"=\" )[ 0 ] for k in str ( data_sample_path ) . split ( \"/\" ) if \"=\" in k ] if data_sample_path . suffix == \".csv\" : columns = next ( csv . reader ( open ( data_sample_path , \"r\" ))) else : raise NotImplementedError ( \"Data sample just supports comma separated csv files\" ) else : columns = [ \"column_name\" ] for file in ( Path ( self . templates ) / \"table\" ) . glob ( \"*\" ): if file . name in [ \"table_config.yaml\" , \"publish.sql\" ]: # Load and fill template template = Template ( file . open ( \"r\" ) . read ()) . render ( table_id = self . table_id , dataset_id = self . dataset_folder . stem , project_id = self . client [ \"bigquery_staging\" ] . project , columns = columns , partition_columns = partition_columns , now = datetime . datetime . now () . strftime ( \"%Y-%m- %d \" ), ) # Write file ( self . table_folder / file . name ) . open ( \"w\" ) . write ( template ) return self publish ( self , if_exists = 'raise' ) Creates BigQuery table at production dataset. Table should be located at <dataset_id>.<table_id> . It creates a view that uses the query from <metadata_path>/<dataset_id>/<table_id>/publish.sql . Make sure that all columns from the query also exists at <metadata_path>/<dataset_id>/<table_id>/table_config.sql , including the partitions. Parameters: Name Type Description Default if_exists str Optional. What to do if table exists. 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' Todo: * Check if all required fields are filled Source code in basedosdados/table.py def publish ( self , if_exists = \"raise\" ): \"\"\"Creates BigQuery table at production dataset. Table should be located at `<dataset_id>.<table_id>`. It creates a view that uses the query from `<metadata_path>/<dataset_id>/<table_id>/publish.sql`. Make sure that all columns from the query also exists at `<metadata_path>/<dataset_id>/<table_id>/table_config.sql`, including the partitions. Args: if_exists (str): Optional. What to do if table exists. * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing Todo: * Check if all required fields are filled \"\"\" if if_exists == \"replace\" : self . delete ( mode = \"prod\" ) self . client [ \"bigquery_prod\" ] . query ( ( self . table_folder / \"publish.sql\" ) . open ( \"r\" ) . read () ) self . update ( \"prod\" ) update ( self , mode = 'all' , not_found_ok = True ) Updates BigQuery schema and description. Parameters: Name Type Description Default mode str Optional. Table of which table to update [prod|staging|all] 'all' not_found_ok bool Optional. What to do if table is not found True Source code in basedosdados/table.py def update ( self , mode = \"all\" , not_found_ok = True ): \"\"\"Updates BigQuery schema and description. Args: mode (str): Optional. Table of which table to update [prod|staging|all] not_found_ok (bool): Optional. What to do if table is not found \"\"\" self . _check_mode ( mode ) if mode == \"all\" : mode = [ \"prod\" , \"staging\" ] else : mode = [ mode ] for m in mode : try : table = self . _get_table_obj ( m ) except google . api_core . exceptions . NotFound : continue table . description = self . _render_template ( \"table/table_description.txt\" , self . table_config ) # save table description open ( self . metadata_path / self . dataset_id / self . table_id / \"table_description.txt\" , \"w\" , ) . write ( table . description ) # if m == \"prod\":/ table . schema = self . _load_schema ( m ) self . client [ f \"bigquery_ { m } \" ] . update_table ( table , fields = [ \"description\" , \"schema\" ] )","title":"Python"},{"location":"py_reference_api/#python-api","text":"Esta API \u00e9 composta de m\u00f3dulos para requisi\u00e7\u00e3o de dados : : download , que permite baixar tabelas do BigQuery em CSV direto na sua m\u00e1quina. read_sql , que permite fazer uma query SQL e carregar os dados no ambiente do Python. read_table , que permite ler uma tabela do BigQuery pelo nome e carregar os dados no ambiente do Python. E tamb\u00e9m de classes para gerenciamento de dados no Google Cloud: Storage , que permite manusear arquivos no Storage Dataset , que permite manusear datasets no BigQuery Table , que permite manusear tables Toda documenta\u00e7\u00e3o do c\u00f3digo abaixo est\u00e1 em ingl\u00eas","title":"Python API"},{"location":"py_reference_api/#modulos","text":"","title":"M\u00f3dulos"},{"location":"py_reference_api/#basedosdados.download","text":"","title":"basedosdados.download"},{"location":"py_reference_api/#basedosdados.download.download","text":"Download table or query result from basedosdados BigQuery (or other). Using a query : download('select * from basedosdados.br_suporte.diretorio_municipios limit 10') Using dataset_id & table_id : download(dataset_id='br_suporte', table_id='diretorio_municipios') You can also add arguments to modify save parameters: download(dataset_id='br_suporte', table_id='diretorio_municipios', index=False, sep='|') Parameters: Name Type Description Default savepath str, pathlib.PosixPath If savepath is a folder, it saves a file as savepath / table_id.csv or savepath / query_result.csv if table_id not available. If savepath is a file, saves data to file. required query str Optional. Valid SQL Standard Query to basedosdados. If query is available, dataset_id and table_id are not required. None dataset_id str Optional. Dataset id available in basedosdados. It should always come with table_id. None table_id str Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. None query_project_id str Optional. Which project the table lives. You can change this you want to query different projects. 'basedosdados' billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None limit int Optional Number of rows. None reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False pandas_kwargs Extra arguments accepted by pandas.to_csv {} Exceptions: Type Description Exception If either table_id or dataset_id were are empty. Source code in basedosdados/download.py def download ( savepath , query = None , dataset_id = None , table_id = None , query_project_id = \"basedosdados\" , billing_project_id = None , limit = None , reauth = False , ** pandas_kwargs , ): \"\"\"Download table or query result from basedosdados BigQuery (or other). * Using a **query**: `download('select * from `basedosdados.br_suporte.diretorio_municipios` limit 10')` * Using **dataset_id & table_id**: `download(dataset_id='br_suporte', table_id='diretorio_municipios')` You can also add arguments to modify save parameters: `download(dataset_id='br_suporte', table_id='diretorio_municipios', index=False, sep='|')` Args: savepath (str, pathlib.PosixPath): If savepath is a folder, it saves a file as `savepath / table_id.csv` or `savepath / query_result.csv` if table_id not available. If savepath is a file, saves data to file. query (str): Optional. Valid SQL Standard Query to basedosdados. If query is available, dataset_id and table_id are not required. dataset_id (str): Optional. Dataset id available in basedosdados. It should always come with table_id. table_id (str): Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. query_project_id (str): Optional. Which project the table lives. You can change this you want to query different projects. billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard limit (int): Optional Number of rows. reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. pandas_kwargs (): Extra arguments accepted by [pandas.to_csv](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_csv.html) Raises: Exception: If either table_id or dataset_id were are empty. \"\"\" savepath = Path ( savepath ) if ( dataset_id is not None ) and ( table_id is not None ): table = read_table ( dataset_id , table_id , query_project_id = query_project_id , billing_project_id = billing_project_id , limit = limit , reauth = reauth , ) elif query is not None : query += f \" limit { limit } \" if limit is not None else \"\" table = read_sql ( query , billing_project_id = billing_project_id , reauth = reauth ) elif query is None : raise BaseDosDadosException ( \"Either table_id, dataset_id or query should be filled.\" ) if savepath . is_dir (): if table_id is not None : savepath = savepath / ( table_id + \".csv\" ) else : savepath = savepath / ( \"query_result.csv\" ) table . to_csv ( savepath , ** pandas_kwargs )","title":"download()"},{"location":"py_reference_api/#basedosdados.download.read_sql","text":"Load data from BigQuery using a query. Just a wrapper around pandas.read_gbq Parameters: Name Type Description Default query sql Valid SQL Standard Query to basedosdados required billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False Returns: Type Description pd.DataFrame Query result Source code in basedosdados/download.py def read_sql ( query , billing_project_id = None , reauth = False ): \"\"\"Load data from BigQuery using a query. Just a wrapper around pandas.read_gbq Args: query (sql): Valid SQL Standard Query to basedosdados billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. Returns: pd.DataFrame: Query result \"\"\" try : return pandas_gbq . read_gbq ( query , credentials = credentials ( reauth = reauth ), project_id = billing_project_id , ) except ( OSError , ValueError ): raise BaseDosDadosException ( \" \\n We are not sure which Google Cloud project should be billed. \\n \" \"First, you should make sure that you have a Google Cloud project. \\n \" \"If you don't have one, set one up following these steps: \\n \" \" \\t 1. Go to this link https://console.cloud.google.com/projectselector2/home/dashboard \\n \" \" \\t 2. Agree with Terms of Service if asked \\n \" \" \\t 3. Click in Create Project \\n \" \" \\t 4. Put a cool name in your project \\n \" \" \\t 5. Hit create \\n \" \"\" \"Copy the Project ID, (notice that it is not the Project Name) \\n \" \"Now, you have two options: \\n \" \"1. Add an argument to your function poiting to the billing project id. \\n \" \" Like `bd.read_table('br_ibge_pib', 'municipios', billing_project_id=<YOUR_PROJECT_ID>)` \\n \" \"2. You can set a project_id in the environment by running the following command in your terminal: `gcloud config set project <YOUR_PROJECT_ID>`.\" \" Bear in mind that you need `gcloud` installed.\" ) except GenericGBQException as e : if \"Reason: 403\" in str ( e ): raise BaseDosDadosException ( \" \\n You still don't have a Google Cloud Project. \\n \" \"Set one up following these steps: \\n \" \"1. Go to this link https://console.cloud.google.com/projectselector2/home/dashboard \\n \" \"2. Agree with Terms of Service if asked \\n \" \"3. Click in Create Project \\n \" \"4. Put a cool name in your project \\n \" \"5. Hit create \\n \" \"6. Rerun this command with the flag `reauth=True`. \\n \" \" Like `read_table('br_ibge_pib', 'municipios', reauth=True)`\" ) else : raise e","title":"read_sql()"},{"location":"py_reference_api/#basedosdados.download.read_table","text":"Load data from BigQuery using dataset_id and table_id. Parameters: Name Type Description Default dataset_id str Optional. Dataset id available in basedosdados. It should always come with table_id. required table_id str Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. required query_project_id str Optional. Which project the table lives. You can change this you want to query different projects. 'basedosdados' billing_project_id str Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard None reauth boolean Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. False limit int Optional. Number of rows to read from table. None Returns: Type Description pd.DataFrame Query result Source code in basedosdados/download.py def read_table ( dataset_id , table_id , query_project_id = \"basedosdados\" , billing_project_id = None , limit = None , reauth = False , ): \"\"\"Load data from BigQuery using dataset_id and table_id. Args: dataset_id (str): Optional. Dataset id available in basedosdados. It should always come with table_id. table_id (str): Optional. Table id available in basedosdados.dataset_id. It should always come with dataset_id. query_project_id (str): Optional. Which project the table lives. You can change this you want to query different projects. billing_project_id (str): Optional. Project that will be billed. Find your Project ID here https://console.cloud.google.com/projectselector2/home/dashboard reauth (boolean): Optional. Re-authorize Google Cloud Project in case you need to change user or reset configurations. limit (int): Optional. Number of rows to read from table. Returns: pd.DataFrame: Query result \"\"\" if ( dataset_id is not None ) and ( table_id is not None ): query = f \"\"\" SELECT * FROM ` { query_project_id } . { dataset_id } . { table_id } `\"\"\" if limit is not None : query += f \" LIMIT { limit } \" else : raise BaseDosDadosException ( \"Both table_id and dataset_id should be filled.\" ) return read_sql ( query , billing_project_id = billing_project_id , reauth = reauth )","title":"read_table()"},{"location":"py_reference_api/#classes","text":"","title":"Classes"},{"location":"py_reference_api/#basedosdados.storage","text":"","title":"basedosdados.storage"},{"location":"py_reference_api/#basedosdados.storage.Storage","text":"Manage files on Google Cloud Storage.","title":"Storage"},{"location":"py_reference_api/#basedosdados.storage.Storage.delete_file","text":"Deletes file from path <bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename> . Parameters: Name Type Description Default filename str Name of the file to be deleted required mode str Folder of which dataset to update [raw|staging|all] required partitions str, pathlib.PosixPath, or dict Optional. Hive structured partition as a string or dict str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None not_found_ok bool Optional. What to do if file not found False Source code in basedosdados/storage.py def delete_file ( self , filename , mode , partitions = None , not_found_ok = False ): \"\"\"Deletes file from path `<bucket_name>/<mode>/<dataset_id>/<table_id>/<partitions>/<filename>`. Args: filename (str): Name of the file to be deleted mode (str): Folder of which dataset to update [raw|staging|all] partitions (str, pathlib.PosixPath, or dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` not_found_ok (bool): Optional. What to do if file not found \"\"\" self . _check_mode ( mode ) if mode == \"all\" : mode = [ \"raw\" , \"staging\" ] else : mode = [ mode ] for m in mode : blob = self . bucket . blob ( self . _build_blob_name ( filename , m , partitions )) if blob . exists (): blob . delete () elif not_found_ok : return else : blob . delete ()","title":"delete_file()"},{"location":"py_reference_api/#basedosdados.storage.Storage.init","text":"Initializes bucket and folders. Folder should be: raw : that contains really raw data staging : preprocessed data ready to upload to BigQuery Parameters: Name Type Description Default replace bool Optional. Whether to replace if bucket already exists False very_sure bool Optional. Are you aware that everything is going to be erased if you replace the bucket? False Exceptions: Type Description Warning very_sure argument is still False. Source code in basedosdados/storage.py def init ( self , replace = False , very_sure = False ): \"\"\"Initializes bucket and folders. Folder should be: * `raw` : that contains really raw data * `staging` : preprocessed data ready to upload to BigQuery Args: replace (bool): Optional. Whether to replace if bucket already exists very_sure (bool): Optional. Are you aware that everything is going to be erased if you replace the bucket? Raises: Warning: very_sure argument is still False. \"\"\" if replace : if not very_sure : raise Warning ( \" \\n ********************************************************\" \" \\n You are trying to replace all the data that you have \" f \"in bucket { self . bucket_name } . \\n Are you sure? \\n \" \"If yes, add the flag --very_sure \\n \" \"********************************************************\" ) else : self . bucket . delete ( force = True ) self . client [ \"storage_staging\" ] . create_bucket ( self . bucket ) for folder in [ \"staging/\" , \"raw/\" ]: self . bucket . blob ( folder ) . upload_from_string ( \"\" )","title":"init()"},{"location":"py_reference_api/#basedosdados.storage.Storage.upload","text":"Upload to storage at <bucket_name>/<mode>/<dataset_id>/<table_id> . You can: Add a single file setting path = <file_path> . Add a folder with multiple files setting path = <folder_path> . The folder should just contain the files and no folders. Add partitioned files setting path = <folder_path> . This folder must follow the hive partitioning scheme i.e. <table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv (ex: mytable/country=brasil/year=2020/mypart.csv ). Remember all files must follow a single schema. Otherwise, things might fail in the future. There are 3 modes: raw : should contain raw files from datasource staging : should contain pre-treated files ready to upload to BiqQuery all : if no treatment is needed, use all . Parameters: Name Type Description Default path str or pathlib.PosixPath Where to find the file or folder that you want to upload to storage required mode str Folder of which dataset to update [raw|staging|all] 'all' partitions str, pathlib.PosixPath, or dict Optional. If adding a single file , use this to add it to a specific partition. str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None if_exists str Optional. What to do if data exists 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' upload_args Extra arguments accepted by google.cloud.storage.blob.Blob.upload_from_file {} Source code in basedosdados/storage.py def upload ( self , path , mode = \"all\" , partitions = None , if_exists = \"raise\" , ** upload_args , ): \"\"\"Upload to storage at `<bucket_name>/<mode>/<dataset_id>/<table_id>`. You can: * Add a single **file** setting `path = <file_path>`. * Add a **folder** with multiple files setting `path = <folder_path>`. *The folder should just contain the files and no folders.* * Add **partitioned files** setting `path = <folder_path>`. This folder must follow the hive partitioning scheme i.e. `<table_id>/<key>=<value>/<key2>=<value2>/<partition>.csv` (ex: `mytable/country=brasil/year=2020/mypart.csv`). *Remember all files must follow a single schema.* Otherwise, things might fail in the future. There are 3 modes: * `raw` : should contain raw files from datasource * `staging` : should contain pre-treated files ready to upload to BiqQuery * `all`: if no treatment is needed, use `all`. Args: path (str or pathlib.PosixPath): Where to find the file or folder that you want to upload to storage mode (str): Folder of which dataset to update [raw|staging|all] partitions (str, pathlib.PosixPath, or dict): Optional. *If adding a single file*, use this to add it to a specific partition. * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): Optional. What to do if data exists * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing upload_args (): Extra arguments accepted by [`google.cloud.storage.blob.Blob.upload_from_file`](https://googleapis.dev/python/storage/latest/blobs.html?highlight=upload_from_filename#google.cloud.storage.blob.Blob.upload_from_filename) \"\"\" if ( self . dataset_id is None ) or ( self . table_id is None ): raise Exception ( \"You need to pass dataset_id and table_id\" ) path = Path ( path ) if path . is_dir (): paths = [ f for f in path . glob ( \"**/*\" ) if f . is_file () and f . suffix == \".csv\" ] parts = [ ( str ( filepath ) . replace ( str ( path ) + \"/\" , \"\" ) . replace ( str ( filepath . name ), \"\" ) ) for filepath in paths ] else : paths = [ path ] parts = [ partitions or None ] self . _check_mode ( mode ) if mode == \"all\" : mode = [ \"raw\" , \"staging\" ] else : mode = [ mode ] for m in mode : for filepath , part in tqdm ( list ( zip ( paths , parts )), desc = \"Uploading files\" ): blob_name = self . _build_blob_name ( filepath . name , m , part ) blob = self . bucket . blob ( blob_name ) if not blob . exists () or if_exists == \"replace\" : upload_args [ \"timeout\" ] = upload_args . get ( \"timeout\" , None ) blob . upload_from_filename ( str ( filepath ), ** upload_args ) else : raise Exception ( f \"Data already exists at { self . bucket_name } / { blob_name } . \" \"Set if_exists to 'replace' to overwrite data\" )","title":"upload()"},{"location":"py_reference_api/#basedosdados.dataset","text":"","title":"basedosdados.dataset"},{"location":"py_reference_api/#basedosdados.dataset.Dataset","text":"Manage datasets in BigQuery.","title":"Dataset"},{"location":"py_reference_api/#basedosdados.dataset.Dataset.create","text":"Creates BigQuery datasets given dataset_id . It can create two datasets: <dataset_id> (mode = 'prod') <dataset_id>_staging (mode = 'staging') If mode is all, it creates both. Parameters: Name Type Description Default mode str Optional. Which dataset to create [prod|staging|all]. 'all' if_exists str Optional. What to do if dataset exists raise : Raises Conflic exception replace : Drop all tables and replace dataset update : Update dataset description pass : Do nothing 'raise' Exceptions: Type Description Warning Dataset already exists and if_exists is set to raise Source code in basedosdados/dataset.py def create ( self , mode = \"all\" , if_exists = \"raise\" ): \"\"\"Creates BigQuery datasets given `dataset_id`. It can create two datasets: * `<dataset_id>` (mode = 'prod') * `<dataset_id>_staging` (mode = 'staging') If `mode` is all, it creates both. Args: mode (str): Optional. Which dataset to create [prod|staging|all]. if_exists (str): Optional. What to do if dataset exists * raise : Raises Conflic exception * replace : Drop all tables and replace dataset * update : Update dataset description * pass : Do nothing Raises: Warning: Dataset already exists and if_exists is set to `raise` \"\"\" if if_exists == \"replace\" : self . delete ( mode ) elif if_exists == \"update\" : self . update () return # Set dataset_id to the ID of the dataset to create. for m in self . _loop_modes ( mode ): # Construct a full Dataset object to send to the API. dataset_obj = self . _setup_dataset_object ( m [ \"id\" ]) # Send the dataset to the API for creation, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. try : job = m [ \"client\" ] . create_dataset ( dataset_obj ) # Make an API request. except Conflict : if if_exists == \"pass\" : return else : raise Conflict ( f \"Dataset { self . dataset_id } already exists\" ) # Make prod dataset public self . publicize ()","title":"create()"},{"location":"py_reference_api/#basedosdados.dataset.Dataset.delete","text":"Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Parameters: Name Type Description Default mode str Optional. Which dataset to delete [prod|staging|all] 'all' Source code in basedosdados/dataset.py def delete ( self , mode = \"all\" ): \"\"\"Deletes dataset in BigQuery. Toogle mode to choose which dataset to delete. Args: mode (str): Optional. Which dataset to delete [prod|staging|all] \"\"\" for m in self . _loop_modes ( mode ): m [ \"client\" ] . delete_dataset ( m [ \"id\" ], delete_contents = True , not_found_ok = True )","title":"delete()"},{"location":"py_reference_api/#basedosdados.dataset.Dataset.init","text":"Initialize dataset folder at metadata_path at metadata_path/<dataset_id> . The folder should contain: dataset_config.yaml README.md Parameters: Name Type Description Default replace str Optional. Whether to replace existing folder. False Exceptions: Type Description FileExistsError If dataset folder already exists and replace is False Source code in basedosdados/dataset.py def init ( self , replace = False ): \"\"\"Initialize dataset folder at metadata_path at `metadata_path/<dataset_id>`. The folder should contain: * `dataset_config.yaml` * `README.md` Args: replace (str): Optional. Whether to replace existing folder. Raises: FileExistsError: If dataset folder already exists and replace is False \"\"\" # Create dataset folder try : self . dataset_folder . mkdir ( exist_ok = replace , parents = True ) except FileExistsError : raise FileExistsError ( f \"Dataset { str ( self . dataset_folder . stem ) } folder does not exists. \" \"Set replace=True to replace current files.\" ) for file in ( Path ( self . templates ) / \"dataset\" ) . glob ( \"*\" ): if file . name in [ \"dataset_config.yaml\" , \"README.md\" ]: # Load and fill template template = self . _render_template ( f \"dataset/ { file . name } \" , dict ( dataset_id = self . dataset_id ) ) # Write file ( self . dataset_folder / file . name ) . open ( \"w\" ) . write ( template ) # Add code folder ( self . dataset_folder / \"code\" ) . mkdir ( exist_ok = replace , parents = True ) return self","title":"init()"},{"location":"py_reference_api/#basedosdados.dataset.Dataset.publicize","text":"Changes IAM configuration to turn BigQuery dataset public. Parameters: Name Type Description Default mode bool Which dataset to create [prod|staging|all]. 'all' Source code in basedosdados/dataset.py def publicize ( self , mode = \"all\" ): \"\"\"Changes IAM configuration to turn BigQuery dataset public. Args: mode (bool): Which dataset to create [prod|staging|all]. \"\"\" for m in self . _loop_modes ( mode ): dataset = m [ \"client\" ] . get_dataset ( m [ \"id\" ]) entries = dataset . access_entries entries . extend ( [ bigquery . AccessEntry ( role = \"roles/bigquery.dataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.metadataViewer\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), bigquery . AccessEntry ( role = \"roles/bigquery.user\" , entity_type = \"iamMember\" , entity_id = \"allUsers\" , ), ] ) dataset . access_entries = entries m [ \"client\" ] . update_dataset ( dataset , [ \"access_entries\" ])","title":"publicize()"},{"location":"py_reference_api/#basedosdados.dataset.Dataset.update","text":"Update dataset description. Toogle mode to choose which dataset to update. Parameters: Name Type Description Default mode str Optional. Which dataset to update [prod|staging|all] 'all' Source code in basedosdados/dataset.py def update ( self , mode = \"all\" ): \"\"\"Update dataset description. Toogle mode to choose which dataset to update. Args: mode (str): Optional. Which dataset to update [prod|staging|all] \"\"\" for m in self . _loop_modes ( mode ): # Send the dataset to the API to update, with an explicit timeout. # Raises google.api_core.exceptions.Conflict if the Dataset already # exists within the project. dataset = m [ \"client\" ] . update_dataset ( self . _setup_dataset_object ( m [ \"id\" ]), fields = [ \"description\" ] ) # Make an API request.","title":"update()"},{"location":"py_reference_api/#basedosdados.table","text":"","title":"basedosdados.table"},{"location":"py_reference_api/#basedosdados.table.Table","text":"Manage tables in Google Cloud Storage and BigQuery.","title":"Table"},{"location":"py_reference_api/#basedosdados.table.Table.append","text":"Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Parameters: Name Type Description Default filepath str or pathlib.PosixPath Where to find the file that you want to upload to create a table with required partitions str, pathlib.PosixPath, dict Optional. Hive structured partition as a string or dict str : <key>=<value>/<key2>=<value2> dict: dict(key=value, key2=value2) None if_exists str 0ptional. What to do if data with same name exists in storage 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' Source code in basedosdados/table.py def append ( self , filepath , partitions = None , if_exists = \"raise\" , ** upload_args ): \"\"\"Appends new data to existing BigQuery table. As long as the data has the same schema. It appends the data in the filepath to the existing table. Args: filepath (str or pathlib.PosixPath): Where to find the file that you want to upload to create a table with partitions (str, pathlib.PosixPath, dict): Optional. Hive structured partition as a string or dict * str : `<key>=<value>/<key2>=<value2>` * dict: `dict(key=value, key2=value2)` if_exists (str): 0ptional. What to do if data with same name exists in storage * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing \"\"\" Storage ( self . dataset_id , self . table_id , ** self . main_vars ) . upload ( filepath , mode = \"staging\" , partitions = None , if_exists = if_exists , ** upload_args , ) self . create ( if_exists = \"replace\" )","title":"append()"},{"location":"py_reference_api/#basedosdados.table.Table.create","text":"Creates BigQuery table at staging dataset. If you add a path, it automatically saves the data in the storage, creates a datasets folder and BigQuery location, besides creating the table and its configuration files. The new table should be located at <dataset_id>_staging.<table_id> in BigQuery. It looks for data saved in Storage at <bucket_name>/staging/<dataset_id>/<table_id>/* and builds the table. It currently supports the types: - Comma Delimited CSV Data can also be partitioned following the hive partitioning scheme <key1>=<value1>/<key2>=<value2> , for instance, year=2012/country=BR Parameters: Name Type Description Default path str or pathlib.PosixPath Where to find the file that you want to upload to create a table with None job_config_params dict Optional. Job configuration params from bigquery None partitioned bool Optional. Whether data is partitioned False if_exists str Optional What to do if table exists 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' force_dataset bool Creates <dataset_id> folder and BigQuery Dataset if it doesn't exists. True Todo: * Implement if_exists=raise * Implement if_exists=pass Source code in basedosdados/table.py def create ( self , path = None , job_config_params = None , partitioned = False , if_exists = \"raise\" , force_dataset = True , ): \"\"\"Creates BigQuery table at staging dataset. If you add a path, it automatically saves the data in the storage, creates a datasets folder and BigQuery location, besides creating the table and its configuration files. The new table should be located at `<dataset_id>_staging.<table_id>` in BigQuery. It looks for data saved in Storage at `<bucket_name>/staging/<dataset_id>/<table_id>/*` and builds the table. It currently supports the types: - Comma Delimited CSV Data can also be partitioned following the hive partitioning scheme `<key1>=<value1>/<key2>=<value2>`, for instance, `year=2012/country=BR` Args: path (str or pathlib.PosixPath): Where to find the file that you want to upload to create a table with job_config_params (dict): Optional. Job configuration params from bigquery partitioned (bool): Optional. Whether data is partitioned if_exists (str): Optional What to do if table exists * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing force_dataset (bool): Creates `<dataset_id>` folder and BigQuery Dataset if it doesn't exists. Todo: * Implement if_exists=raise * Implement if_exists=pass \"\"\" # Add data to storage if isinstance ( path , ( str , PosixPath , ), ): Storage ( self . dataset_id , self . table_id , ** self . main_vars ) . upload ( path , mode = \"staging\" , if_exists = \"replace\" ) # Create Dataset if it doesn't exist if force_dataset : dataset_obj = Dataset ( self . dataset_id , ** self . main_vars ) try : dataset_obj . init () except FileExistsError : pass dataset_obj . create ( if_exists = \"pass\" ) self . init ( data_sample_path = path , if_exists = \"replace\" ) external_config = external_config = bigquery . ExternalConfig ( \"CSV\" ) external_config . options . skip_leading_rows = 1 external_config . options . allow_quoted_newlines = True external_config . options . allow_jagged_rows = True external_config . autodetect = False external_config . schema = self . _load_schema ( \"staging\" ) external_config . source_uris = ( f \"gs:// { self . bucket_name } /staging/ { self . dataset_id } / { self . table_id } /*\" ) if partitioned : hive_partitioning = bigquery . external_config . HivePartitioningOptions () hive_partitioning . mode = \"AUTO\" hive_partitioning . source_uri_prefix = self . uri . format ( dataset = self . dataset_id , table = self . table_id ) . replace ( \"*\" , \"\" ) external_config . hive_partitioning = hive_partitioning table = bigquery . Table ( self . table_full_name [ \"staging\" ]) table . external_data_configuration = external_config if if_exists == \"replace\" : self . delete ( mode = \"staging\" ) self . client [ \"bigquery_staging\" ] . create_table ( table ) table = bigquery . Table ( self . table_full_name [ \"staging\" ])","title":"create()"},{"location":"py_reference_api/#basedosdados.table.Table.delete","text":"Deletes table in BigQuery. Parameters: Name Type Description Default mode str Table of which table to delete [prod|staging|all] required Source code in basedosdados/table.py def delete ( self , mode ): \"\"\"Deletes table in BigQuery. Args: mode (str): Table of which table to delete [prod|staging|all] \"\"\" self . _check_mode ( mode ) if mode == \"all\" : for m , n in self . table_full_name [ mode ] . items (): self . client [ f \"bigquery_ { m } \" ] . delete_table ( n , not_found_ok = True ) else : self . client [ f \"bigquery_ { mode } \" ] . delete_table ( self . table_full_name [ mode ], not_found_ok = True )","title":"delete()"},{"location":"py_reference_api/#basedosdados.table.Table.init","text":"Initialize table folder at metadata_path at metadata_path/<dataset_id>/<table_id> . The folder should contain: table_config.yaml publish.sql You can also point to a sample of the data to auto complete columns names. Parameters: Name Type Description Default data_sample_path str, pathlib.PosixPath Optional. Data sample path to auto complete columns names It supports Comma Delimited CSV. None if_exists str Optional. What to do if table folder exists 'raise' : Raises FileExistsError 'replace' : Replace folder 'pass' : Do nothing 'raise' Exceptions: Type Description FileExistsError If folder exists and replace is False. NotImplementedError If data sample is not in supported type or format. Source code in basedosdados/table.py def init ( self , data_sample_path = None , if_exists = \"raise\" ): \"\"\"Initialize table folder at metadata_path at `metadata_path/<dataset_id>/<table_id>`. The folder should contain: * `table_config.yaml` * `publish.sql` You can also point to a sample of the data to auto complete columns names. Args: data_sample_path (str, pathlib.PosixPath): Optional. Data sample path to auto complete columns names It supports Comma Delimited CSV. if_exists (str): Optional. What to do if table folder exists * 'raise' : Raises FileExistsError * 'replace' : Replace folder * 'pass' : Do nothing Raises: FileExistsError: If folder exists and replace is False. NotImplementedError: If data sample is not in supported type or format. \"\"\" if not self . dataset_folder . exists (): raise FileExistsError ( f \"Dataset folder { self . dataset_folder } folder does not exists. \" \"Create a dataset before adding tables.\" ) try : self . table_folder . mkdir ( exist_ok = ( if_exists == \"replace\" )) except FileExistsError : if if_exists == \"raise\" : raise FileExistsError ( f \"Table folder already exists for { self . table_id } . \" ) elif if_exists == \"pass\" : return self partition_columns = [] if isinstance ( data_sample_path , ( str , PosixPath , ), ): # Check if partitioned and get data sample and partition columns data_sample_path = Path ( data_sample_path ) if data_sample_path . is_dir (): data_sample_path = [ f for f in data_sample_path . glob ( \"**/*\" ) if f . is_file () and f . suffix == \".csv\" ][ 0 ] partition_columns = [ k . split ( \"=\" )[ 0 ] for k in str ( data_sample_path ) . split ( \"/\" ) if \"=\" in k ] if data_sample_path . suffix == \".csv\" : columns = next ( csv . reader ( open ( data_sample_path , \"r\" ))) else : raise NotImplementedError ( \"Data sample just supports comma separated csv files\" ) else : columns = [ \"column_name\" ] for file in ( Path ( self . templates ) / \"table\" ) . glob ( \"*\" ): if file . name in [ \"table_config.yaml\" , \"publish.sql\" ]: # Load and fill template template = Template ( file . open ( \"r\" ) . read ()) . render ( table_id = self . table_id , dataset_id = self . dataset_folder . stem , project_id = self . client [ \"bigquery_staging\" ] . project , columns = columns , partition_columns = partition_columns , now = datetime . datetime . now () . strftime ( \"%Y-%m- %d \" ), ) # Write file ( self . table_folder / file . name ) . open ( \"w\" ) . write ( template ) return self","title":"init()"},{"location":"py_reference_api/#basedosdados.table.Table.publish","text":"Creates BigQuery table at production dataset. Table should be located at <dataset_id>.<table_id> . It creates a view that uses the query from <metadata_path>/<dataset_id>/<table_id>/publish.sql . Make sure that all columns from the query also exists at <metadata_path>/<dataset_id>/<table_id>/table_config.sql , including the partitions. Parameters: Name Type Description Default if_exists str Optional. What to do if table exists. 'raise' : Raises Conflict exception 'replace' : Replace table 'pass' : Do nothing 'raise' Todo: * Check if all required fields are filled Source code in basedosdados/table.py def publish ( self , if_exists = \"raise\" ): \"\"\"Creates BigQuery table at production dataset. Table should be located at `<dataset_id>.<table_id>`. It creates a view that uses the query from `<metadata_path>/<dataset_id>/<table_id>/publish.sql`. Make sure that all columns from the query also exists at `<metadata_path>/<dataset_id>/<table_id>/table_config.sql`, including the partitions. Args: if_exists (str): Optional. What to do if table exists. * 'raise' : Raises Conflict exception * 'replace' : Replace table * 'pass' : Do nothing Todo: * Check if all required fields are filled \"\"\" if if_exists == \"replace\" : self . delete ( mode = \"prod\" ) self . client [ \"bigquery_prod\" ] . query ( ( self . table_folder / \"publish.sql\" ) . open ( \"r\" ) . read () ) self . update ( \"prod\" )","title":"publish()"},{"location":"py_reference_api/#basedosdados.table.Table.update","text":"Updates BigQuery schema and description. Parameters: Name Type Description Default mode str Optional. Table of which table to update [prod|staging|all] 'all' not_found_ok bool Optional. What to do if table is not found True Source code in basedosdados/table.py def update ( self , mode = \"all\" , not_found_ok = True ): \"\"\"Updates BigQuery schema and description. Args: mode (str): Optional. Table of which table to update [prod|staging|all] not_found_ok (bool): Optional. What to do if table is not found \"\"\" self . _check_mode ( mode ) if mode == \"all\" : mode = [ \"prod\" , \"staging\" ] else : mode = [ mode ] for m in mode : try : table = self . _get_table_obj ( m ) except google . api_core . exceptions . NotFound : continue table . description = self . _render_template ( \"table/table_description.txt\" , self . table_config ) # save table description open ( self . metadata_path / self . dataset_id / self . table_id / \"table_description.txt\" , \"w\" , ) . write ( table . description ) # if m == \"prod\":/ table . schema = self . _load_schema ( m ) self . client [ f \"bigquery_ { m } \" ] . update_table ( table , fields = [ \"description\" , \"schema\" ] )","title":"update()"},{"location":"variable_naming_rules/","text":"Diretrizes de nomes para vari\u00e1veis Recomendamos fortemente que a nomea\u00e7\u00e3o de colunas nas tabelas siga nossos padr\u00f5es BD+ . Isso facilita o entendimento de usu\u00e1rios(as) da tabela e a interoperabilidade entre bases. Pensou em melhorias para os padr\u00f5es definidos? Abra um issue no nosso Github para conversarmos :)","title":"Colunas"},{"location":"variable_naming_rules/#diretrizes-de-nomes-para-variaveis","text":"Recomendamos fortemente que a nomea\u00e7\u00e3o de colunas nas tabelas siga nossos padr\u00f5es BD+ . Isso facilita o entendimento de usu\u00e1rios(as) da tabela e a interoperabilidade entre bases.","title":"Diretrizes de nomes para vari\u00e1veis"},{"location":"variable_naming_rules/#pensou-em-melhorias-para-os-padroes-definidos","text":"Abra um issue no nosso Github para conversarmos :)","title":"Pensou em melhorias para os padr\u00f5es definidos?"},{"location":"video_script/","text":"Al\u00f4, vou mostar como usar o CLI do basedosdados para adicionar uma tabela nova. Vamos come\u00e7ar pelo diret\u00f3rio dos munic\u00edpios, nosso pilar central :) J\u00e1 temos ele salvo no storage: basedosdados/staging/br_suporte/diretorio_municipios onde - br_suporte \u00e9 o dataset - diretorio_municipios \u00e9 a tabela O primeiro passo \u00e9 criar os metadados do nosso dataset basedosdados dataset init br_suporte Isso cria um folder e arquivos de configura\u00e7\u00e3o em /bases Uma vez preenchidos os arquivos, podemos criar o dataset no BigQuery basedosdados dataset create br_suporte Isso cria dois datasets, o staging para preparar os dados e o de produ\u00e7\u00e3o que ser\u00e1 compartilhado Agora podemos criar os arquivos de config da tabela. Podemos usar os dados para preencher as colunas do arquivo :) basedosdados table init br_suporte diretorio_municipios --data_sample_path=data/br_suporte/municipios.csv Isso cria um folder dentro da pasta do dataset com os arquivos de config table_config.yaml tem toda a metada informa\u00e7\u00e3o publish.sql \u00e9 o \u00faltimo tratamento antes de publicar a tabela Uma vez com tudo preenchido, podemos criar a tabela no staging basedosdados table create br_suporte diretorio_municipios A tabela j\u00e1 vem com todas as configura\u00e7\u00f5es e s\u00f3 faltam os \u00faltimos ajustes e tratamentos que podemos adicionar em publish.sql Finalmente, basta publicar os dados basedosdados table publish br_suporte diretorio_municipios Tcharam!","title":"Video script"}]}